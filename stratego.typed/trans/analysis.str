module analysis

imports nabl2/api
imports flowspec/api
imports static-semantics
imports pp
imports libspoofax/stratego/debug

rules // Analysis 

  editor-analyze = nabl2-analyze(id)

  nabl2-custom-analysis-unit-hook:
    (resource, ast, custom-initial-result) -> (resource, ast)

  nabl2-custom-analysis-final-hook(|a):
    (_, _, custom-unit-results) -> (errors, warnings, notes, custom-final-result)
  with asts     := <map(\(ast-resource, ast) -> <nabl2--index-ast(|ast-resource)> ast\)> custom-unit-results // workaround for https://yellowgrass.org/issue/NaBL2/54
  where
     (with(custom-final-result := <flowspec-analyze(|a)> asts)
     < errors   := <collect-in-build(unbound-var(|a)|custom-final-result)> asts
       ; warnings := <collect-in-build(maybe-unbound-var(|a)|custom-final-result)> asts
       ; notes    := []
     + errors := []
       ; warnings := []
       ; notes := []
     )

  collect-in-build(s|a) = collect-all(?Build(<id>); collect-all(s, conc), conc); concat

  unbound-var(|a): v@Var(_) -> (v, "Variable is unbound")
  where
    rd-set := <flowspec-get-property-pre(|a, "reachingDefinitions")> v
  ; [None()] := <flowspec-set-lookup(?(v, _))> rd-set

  maybe-unbound-var(|a): v@Var(_) -> (v, "Variable may be unbound")
  where
    rd-set := <flowspec-get-property-pre(|a, "reachingDefinitions")> v
  ; rd := <flowspec-set-lookup(?(v, _))> rd-set
  ; <fetch(?None())> rd
  ; <fetch(?Some(_))> rd

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected
