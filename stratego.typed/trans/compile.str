module compile

imports signatures/StrategoTyped-sig
imports libstrc
imports misc
imports dr-scoping

strategies

  compile-module(|project-path):
    Module(m, defs) -> (imps, decls)
    with id
      ; (imps, defs') := <partition(?Imports(_))> defs
      ; <set-config> ("--library", ())
      ; decls := <frontend-sep-comp> Specification(defs')
      ; <map((id, try(prepare-decl)); store-decl(|project-path, m))> decls

rules

  prepare-decl:
    s@SDefT(_, svars, tvars, _) -> body
    with id
      ; new-svars := <let apply(|i) = !$[svar_[i]] in nmap(apply|0) end> svars
      ; new-tvars := <let apply(|i) = !$[tvar_[i]] in nmap(apply|0) end> tvars
      ; body := <RenameDefinition(|new-svars, new-tvars)> s

  store-decl(|project-path, m):
    (f, d) -> file
    with id
      ; file := <src-gen-file(|project-path, $[stratego.typed/[f]], ".aterm")> m
      ; <WriteToTextFile> (file, d)

strategies

  frontend-sep-comp =
    m-transform-split-definitions(id

      // add some definitions and constructors

      ; if-not-lib(m-add-main)
      ; m-add-anno-cong-def
      ; where(dr-constructors; map(m-add-constructor))

      // desugar and check constructors

      ; m-transform-constructors(id
          ; pre-desugar
          ; try(DeclareVarToConst)
          ; try((TupleDecl <+ QuotedConstrDecl); pre-desugar)
          ; (GenerateCheckRule <+ dbg(|"GenerateCheckRule fails: "))
          ; try(where(m-MkCongDef; m-add-def))
        )

      // desugar and check overlays

      ; m-transform-overlays(id
          ; pre-desugar
          ; check-overlay
          ; try(DeclareVarToConst)
        )

      ; m-transform-overlays(id
          ; m-variables-to-constructors-in-def
          ; pre-desugar
// commented: Test whether all variables used in builds are matched before. But variables can be nullary constructors or overlays. Therefore needs global information
//          ; not(def-use-def)
          ; not(check-where-with)
          ; raise-annotations
          ; GenerateCheckRule
          ; DeclareExpandOverlay
          ; where(Overlay-to-Congdef; m-add-def)
        )

// commented: checks if used constructor with such an arity exists. Therefore needs global information
//      ; m-transform-overlays(
//          not(check-constructors)
//        )

      // transform and check local definitions

      ; m-transform-local-defs(map(id
          ; m-repair-types
          ; pre-desugar        
          ; raise-annotations
        ))

      ; m-lift-dynamic-rules-from-spec

// commented: checks if used strategy with such an arity exists. Therefore needs global information
//      ; check-calls

      ; m-transform-local-defs(
          map(id
            ; stratego-desugar
            ; raise-annotations
//            ; not(def-use-def)
//            ; not(check-constructors)
            ; expand-overlays-in-def
            ; rules-to-sdefs-def
            ; desugar-list-matching
            ; desugar-DefaultVarDec
            ; strename
            ; desugar-def
            ; check-patterns
          )
        )

      ; m-transform-local-defs(id
          ; ![<joindefs>] 
          ; [RenameSDef]
        )

      ; m-transform-external-defs(id
          ; if ?[_,_|_] then
              warn(|"multiple external definitions with same signature")
            ; [id | ![]] // Cannot reuse dyn rule when already used in library
            end
          ; [RenameSDef
             ; desugar-DefaultVarDec
             ; strename
            ]
        )

      ; m-transform-local-defs(
          [rename-calls
           ; simplify
           ; define-congruences-def
          ]
        )

// commented: Can't tell if unused without global information
//      ; if-lib(remove-unused-external-defs, remove-unused-defs)
    )
// commented: based on command line flags that we don't use/set, does some kind of checks and prints intermediate results to files, so not really useful
//    ; tfc1(|"Stratego-Core", "fe-cong")

  m-transform-split-definitions(s) =
    dr-scope-all-verbose(id
     ; to-model
     ; s
     ; m-split-definitions
     )

  m-split-definitions = id
    ; where(id
      ; m-get-all-local-definitions
      ; map(!(<m-def-signature;Fst>, <id>))
      ; ?localDef*
    )
    ; where(id
      ; m-get-all-constructors
      ; map(!(<m-constr-signature;Fst>, <id>))
      ; ?constructor*
    )
    ; ![localDef*, constructor*]
