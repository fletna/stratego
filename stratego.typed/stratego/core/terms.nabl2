module stratego/core/terms

imports signatures/stratego/core/terms-sig

imports stratego/core/signatures

rules

  Term [[ Var(t) ^ (s) : _ ]]  := // : ty ]] :=
    Variable { t } -> s,
    Variable { t } |-> d,
    d : dty,
    dty == ty.

  PreTerm [[ Var(t) ^ (s) : _ ]]  := // : ty ]] :=
    Variable { t } -> s,
    Variable { t } |-> d,
    d : dty,
    dty == ty.

rules

  Term [[ Wld() ^ (s) : _ ]].

  Term [[ Anno(pt, anno) ^ (s) : _ ]]  := // : ty ]] :=
    PreTerm [[ pt ^ (s) : _ ]] , // : ty ]],
    PreTerm [[ anno ^ (s) : _ ]].

  Term [[ As(v, t) ^ (s) : _ ]]  := // : ty ]] :=
    Term [[ v ^ (s) : _ ]] , // : vty ]],
    vty == ty,
    Term [[ t ^ (s) : _ ]] , // : tty ]],
    tty == ty.

  PreTerm [[ Wld() ^ (s) : _ ]].

  PreTerm [[ Int(_) ^ (s) : ConstType(Sort("Int",[])) ]].
  PreTerm [[ Real(_) ^ (s) : ConstType(Sort("Real",[])) ]].
  PreTerm [[ Str(_) ^ (s) : ConstType(Sort("String",[])) ]].

  PreTerm [[ Op(c, ts) ^ (s) : _ ]]  := // : drty ]] :=
    Op { c } -> s,
    Op { c } |-> d,
    Map1T(Term) [[ ts ^ (s) : _ ]] , // : tys ]],
    d : FunType(dtys, drty),
    tys == dtys.

  PreTerm [[ OpQ(c, ts) ^ (s) : _ ]]  := // : drty ]] :=
    Op { c } -> s,
    Op { c } |-> d,
    Map1T(Term) [[ ts ^ (s) : _ ]] , // : tys ]],
    d : FunType(dtys, drty),
    tys == dtys.

  PreTerm [[ Explode(t, ts) ^ (s) : ConstType(Sort("ATerm",[])) ]] :=
    Term [[ t ^ (s) : ConstType(Sort("String",[])) ]],
    Term [[ ts ^ (s) : _ ]] . // TODO: expect list type // : argsty ]]. // TODO: expect list type

  PreTerm [[ As(v, pt) ^ (s) : _ ]]  := // : ty ]] :=
    PreTerm [[ v ^ (s) : _ ]] , // : vty ]],
    vty == ty,
    PreTerm [[ pt ^ (s) : _ ]] , // : tty ]],
    tty == ty.
