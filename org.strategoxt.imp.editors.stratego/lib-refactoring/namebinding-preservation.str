module namebinding-preservation

rules

/**
 * Collects name binding violation messages by comparing the name annotations 
 * in the transformed tree before and after re-analysis.
 * @example input:
 * ast-t := <annotate; transform> ast
 * ast-t-reanalyzed := <annotate; transform; re-annotate> ast
 * is-name = ?oldname <+ ?newname
 * @param matches endangered names
 * @type (Term, Term) -> List((Term, String)) 
 */
namebinding-error-messages(is-name):
  (ast-t, ast-t-reanalyzed) -> violation-messages
  where
    violations := <collect-binding-violations(is-name)> (ast-t, ast-t-reanalyzed);
    violation-messages := <map(mk-binding-violation-message)> violations

collect-binding-violations(is-name):
  (ast-t, ast-t-reanalyzed) -> violations
  where
    old-names  := <collect-all(where(is-name), conc)> ast-t; 
    new-names  := <collect-all(where(is-name), conc)> ast-t-reanalyzed;
    violations := <zip; binding-violations> (old-names, new-names)
	
binding-violations: 
  [(x,y)|tl] -> violations
  where
    (hd-violations, rest) := <binding-violations(|x,y)> tl;
    rec-violations := <binding-violations <+ ?[]> rest;
    violations := <conc> (hd-violations, rec-violations)

binding-violations(|x,y):
  lst -> (<make-set> violations, remaining)
  where
    (violations, remaining) := <
       filter(not(?(x,y)));
       partition(is-binding-violation(|x,y))
    > lst

is-binding-violation(|x,y) =
  where((?(_,y) <+ ?(x,_)); not(?(x,y)))

mk-binding-violation-message:
  (name, _) -> (name, <!$[Variabele captures detected for '[<strip-annos> name]']>)