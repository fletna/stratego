module consistency-preservation

rules

/**
 * Collects consistency changes by comparing the semantic errors and warnings  
 * of the (re)analyzed tree before and after transformation
 * @example input:
 * ast := <annotate> tree
 * ast-t := <annotate; transform; re-annotate> tree
 * collect-constraint-errors = !(<collect-all(constraint-error), conc>, <collect-all(constraint-warning), conc>) 
 * @param AST -> (errors, warnings)
 * @type (AST, AST) -> (errors, warnings)
 */
introduced-constraint-errors(collect-constraint-errors):
  (ast, ast-t) -> (introduced-errors, introduced-warnings)
  where
    (errors-before, warnings-before) := <collect-constraint-errors; topdown(strip-annos)> ast;
    (errors-after, warnings-after)   := <collect-constraint-errors; topdown(strip-annos)> ast-t;
    introduced-errors   := <diff> (errors-after, errors-before); 
    introduced-warnings := <diff> (warnings-after, warnings-before) //TODO: when equal? 

/**
 * Collects consistency changes by comparing the semantic errors and warnings  
 * of the (re)analyzed trees before and after transformation
 * @param AST -> (errors, warnings)
 * @type (List(AST), List(AST)) -> (errors, warnings)
 */	
introduced-constraint-errors(collect-constraint-errors):
  (asts, asts-t) -> (introduced-errors, introduced-warnings)
  where
    (errors-before, warnings-before) := <map(collect-constraint-errors); unzip; topdown(strip-annos)> asts;
    (errors-after, warnings-after)   := <map(collect-constraint-errors); unzip; topdown(strip-annos)> asts-t;
    introduced-errors   := <diff> (errors-after, errors-before); 
    introduced-warnings := <diff> (warnings-after, warnings-before) //TODO: when equal? 
