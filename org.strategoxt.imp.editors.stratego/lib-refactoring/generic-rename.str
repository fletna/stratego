module generic-rename

imports
  lib-refactoring/consistency-preservation
  lib-refactoring/namebinding-preservation
  
rules

/**
 * Applies renaming oldname{ref} to newname{ref} on a list of annotated ASTs,
 * and checks behaviour preservation
 * Binding violations are reported as errors, semantic constraint violations are reported as errors/warnings
 * @param reannotates names in transformed tree
 * @param collects constraint errors/warnings in analysed tree
 * @param old name annotated with its reference name
 * @param new name
 * @type List(AST) -> (List(AST,AST'), List(errors), List(warnings))
 */  
apply-rename-refactoring(annotate-names, collect-constraint-errors|oldname, newname):
  asts-analyzed -> (ast-changes, errors, warnings)
  where
    (ast-changes, errors, warnings) := 
      <apply-rename-refactoring(annotate-names, collect-constraint-errors|[(oldname, newname)])> asts-analyzed

/**
 * Applies multiple renamings oldname{ref} to newname{ref} on a list of annotated ASTs,
 * and checks behaviour preservation
 * Binding violations are reported as errors, semantic constraint violations are reported as errors/warnings
 * @param reannotates names in transformed tree
 * @param collects constraint errors/warnings in analysed tree
 * @param list of old-name/new-name tuples  
 * @type List(AST) -> (List(AST,AST'), List(errors), List(warnings))
 */  
apply-rename-refactoring(annotate-names, collect-constraint-errors|renamings):
  asts-analyzed -> (ast-changes, errors, warnings)
  where  
    asts-transformed := <topdown(try(apply-rename(|renamings)))> asts-analyzed;
    asts-reanalyzed := <annotate-names> asts-transformed;
    (constraint-errors, warnings) := 
      <introduced-constraint-errors(collect-constraint-errors)> (asts-analyzed, asts-reanalyzed);
    binding-violations := 
      <namebinding-error-messages(is-endangered-name(|renamings))> (asts-transformed, asts-reanalyzed);
    errors := <conc>(binding-violations, constraint-errors);
    ast-changes := <get-changed-asts> (asts-analyzed, asts-transformed)

apply-rename(|renamings):
  oldname -> newname
  where
    <?[(old, new)|tail]> renamings;
    newname := <apply-rename(|old, new) <+ apply-rename(|tail)> oldname

apply-rename(|old, new): 
  old -> new{ref} 
  where 
    <?_{ref}> old

is-endangered-name(|renamings):
  trm -> trm
  where
    <?[(old, new)|tail]> renamings;
    <is-endangered-name(|old, new) <+ is-endangered-name(|tail)> trm  
  
is-endangered-name(|old, new):
  trm -> trm
  where
    <strip-annos; (equal(|old{}) <+ equal(|new{}))> trm

get-changed-asts:
  (asts-before, asts-after) -> changed-asts
  where
    changed-asts := <zip; filter(not(equal))> (
      <topdown(strip-annos)> asts-before, 
      <topdown(strip-annos)> asts-after
    )

get-changed-asts:
  (ast-before, ast-after) -> <get-changed-asts> ([ast-before], [ast-after])
  where
  	<not(is-list)> ast-before;
  	<not(is-list)> ast-after
