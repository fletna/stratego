module lib-refactoring/files

imports
  lib-refactoring/user-interaction
  
rules //strategies for collecting files

  get-source-asts(parse|extensions, source-dirs) =
    get-source-asts(parse, check-extension(|extensions), elem-of(|source-dirs))

  get-source-asts(parse, is-source-file, is-source-dir) =
  	save-all-resources;
    get-source-files(is-source-file, is-source-dir);
    parse-source-files(parse)
  
  parse-source-files(parse) :
  	filenames -> asts
  	where
      (asts, parse-failures) := <partition(parse)> filenames;
      <report-parse-failures> parse-failures
  	
  get-source-files(|extensions, source-dirs) =
    get-source-files(check-extension(|extensions), elem-of(|source-dirs))
  
  get-source-files(is-source-file, is-source-dir) =
    ?dir-path; 
    if <where(is-source-dir); isdir> dir-path then
      readdir; 
      map(!$[[dir-path]/[<id>]]);  
      map(
        where(is-source-file)  <+ 
        (get-source-files(is-source-file, is-source-dir))
      ); 
      flatten-list 
    else
      ![]
    end
	
  save-all-resources = where(prim("SSL_EXT_saveresources", ""))
  
  check-extension(|ext) =
  	has-extension(|ext)

  check-extension(|extensions) = 
  	where(
  	  ext := <get-extension>; 
  	  <fetch(equal(|ext))> extensions 
  	)
  	
  elem-of(|source-dirs) =
  	!(<id>, source-dirs); elem