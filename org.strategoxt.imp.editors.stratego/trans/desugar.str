module desugar

imports
  libstratego-lib
  libstrc

signature constructors

  FromMetaExpr     : Term -> Term
  ToMetaExpr       : Term -> Term
  FromTerm         : Term -> Term
  ToTerm           : Term -> Term
  FromMetaListExpr : Term -> Term
  ToMetaListExpr   : Term -> Term
  FromBuild        : Term -> Term
  ToBuild          : Term -> Term
  FromStrategy     : Term -> Term
  ToStrategy       : Term -> Term
  meta-var         : String -> Term
  meta-listvar     : String -> Term

rules

  basic-desugar-top =
    topdown(try(basic-desugar))

  basic-desugar:
    SDef(x, a*, s) -> SDefT(x, a*, [], s)

  basic-desugar:
    RDef(x, a*, s) -> SDefT(x, a*, [], s)

  basic-desugar:
    RDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s)

  basic-desugar:
    RDec(x, a*) -> RDecT(x, a*, [])

  basic-desugar:
    SDefNoArgs(x, s) -> SDefT(x, [], [], s)

  basic-desugar:
    RDefNoArgs(x, s) -> SDefT(x, [], [], s)

  basic-desugar:
    OverlayNoArgs(x, o) -> Overlay(x, [], o)

  basic-desugar:
    RDecNoArgs(x) -> RDecT(x, [], [])

  basic-desugar:
    Call(x, s*) -> CallT(x, s*, [])

  basic-desugar:
    CallNoArgs(x) -> CallT(x, [], [])

  basic-desugar:
    ListVar(x) -> x

  basic-desugar:
    DefaultVarDec(x) -> VarDec(x, ConstType(SortNoArgs("ATerm")))

  basic-desugar:
    RuleNoCond(t1, t2) -> Rule(t1, t2, [])

  basic-desugar:
    Choice(s1, s2) -> GuardedLChoice(s1, Id(), s2)

  basic-desugar:
    LChoice(s1, s2) -> GuardedLChoice(s1, Id(), s2)

  basic-desugar:
    RChoice(s1, s2) -> GuardedLChoice(s2, Id(), s1)

  basic-desugar:
    CondChoice(c, s1, s2) -> GuardedLChoice(Where(c), s1, s2)

  basic-desugar:
    IfThen(c, s1) -> GuardedLChoice(Where(c), s1, Id())

  basic-desugar:
    ToMetaExpr(t) -> ToMetaExpr(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToBuild(t) -> ToBuild(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToTerm(t) -> ToTerm(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToMetaListExpr(t) -> ToMetaListExpr(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToStrategy(t) -> ToStrategy(<extract-meta-expr-escapes> t)

  // HACK: eliminate embedded languages
  extract-meta-expr-escapes:
    t -> t'
    with
      t' := <collect-om(?FromTerm(_) + ?FromMetaExpr(_) + ?FromBuild(_)
                      + ?FromMetaListExpr(_) + ?FromStrategy(_)
                      + \meta-var(x) -> Var(x)\
                      + \meta-listvar(x) -> Var(x)\, conc)> t
