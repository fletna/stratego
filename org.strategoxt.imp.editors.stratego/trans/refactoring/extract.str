module refactoring/extract

imports
  libstrc
  lib-refactoring/namebinding-preservation
  analysis
  lib/editor-common.generated
  lib-refactoring/fetch

//TODO Scope
//TODO Binding, check vars in parent sdef
//TODO testset: succeed for correct cases, fails for incorrect, maybe: "do not know" otherwise 

rules //extract refactoring

extract-refactoring :
  (str-name, selected, position, ast, path, project-path) -> (ast-changes, fatal-errors, errors, warnings)
  where 
         (sdeft, callt) := <mk-defs-for-extraction> (str-name, selected); debug(!"Defs: ")
        ; ast' := <extract(?SDefT(_, _, _, _)|position, callt, sdeft)> ast //TODO insert sdef, TODO origin-tracking at-position in refactoring lib
        ; ast-changes := [(ast, ast')]
        ; fatal-errors := []
        ; warnings := <collect-all(precondition-warning(pp-stratego-string))> sdeft
        ; errors := []

rules //preconditions

precondition-warning(pp):
	trm -> (outside-subtrm, $[selection extended to: [<pp> trm]])
	where
		outside-subtrm := <origin-term; not(in-selected-fragment)> trm
	 

rules
	
mk-defs-for-extraction =
  mk-defs-for-selection-in-chain <+
  mk-defs-for-selection
	
mk-defs-for-selection-in-chain:
	(str-name, selected) -> (sdeft, c#([callt, tail-child]))
	where
		c#([selected', tail-child]) := <reorder-associativity-chain> selected;
		(sdeft, callt) := <mk-defs-for-selection> (str-name, selected')

mk-defs-for-selection:
	(str-name, selected) -> (sdeft, callt)
	where
          sdeft-temp := SDefT(str-name, [], [], selected)
        ; debug(!"1: ")
        ; sdeft-reanalyzed := <topdown(strip-annos) ; declare-bodies> SDefT(str-name, [], [], selected)
        ; debug(!"2: ")
        ; svaruses := <collect-all(is-unbound-svar)> sdeft-reanalyzed
        ; debug(!"3: ")
        ; svardecs := <map(svaruse-to-svardec)> svaruses
        ; debug(!"4: ")
        ; tvaruses := <collect-all(is-unbound-tvar)> sdeft-reanalyzed
        ; debug(!"6: ")
        ; tvardecs := <map(tvaruse-to-tvardec)> tvaruses
        ; debug(!"7: ")
        ; sdeft := SDefT(str-name, svardecs, tvardecs, selected)
        ; debug(!"8: ")
        ; callt := CallT(SVar(str-name), svaruses, tvaruses)
        ; debug(!"9: ")

rules //transformation
	
extract(match|position-caller, caller, callee):
	ast -> ast'
	where
		position' := <fetch-up-position(match|ast)> position-caller;
        ast' := <
        	insert-at-position(|<at-last(elem-as-list(inc))> position', callee);
        	at-position(!caller|position-caller)
        > ast //TODO insert sdef, TODO origin-tracking at-position in refactoring lib

elem-as-list(s) =
	?[<id>]; s; ![<id>]

insert-at-position(|position, elems):
	ast -> ast'
	where
		list-position := <init> position;
		elem-position := <last> position; 
		ast' := <at-position(insert-at-index(|elem-position, elems)|list-position)> ast

insert-at-index(|index, elem):
	lst -> <insert-at-index(|index, [elem])> lst
	where
		<not(is-list)> elem
	
insert-at-index(|index, elems):
	lst -> lst'
	where
		(prefix, suffix) := <split-at(|index)> lst;
		lst' := <concat> [prefix, elems, suffix]

rules //helpers reordering associative chains
	
in-selected-fragment = id //prim("SSL_EXT_in_selected_fragment", <id>)
origin-non-layout-tokens = ![] //prim("SSL_EXT_origin_non_layout_tokens", <id>)

reorder-associativity-chain =
  origin-track-forced(reorder-right-associativity-chain) //TODO left-chain
  
reorder-right-associativity-chain:
  chain@cons#([l,r]) -> cons#([selected, tail-child])
  where
  	selected := <break-right-associativity-chain(|cons)> chain;
  	tail-child := <broken-child-in-right-associativity-chain(|cons)> chain;
  	<check-brackets-tail-term> (chain, tail-child) 

/*Hack: fails for wrong selections like [[a + (b + c]] + d) */
check-brackets-tail-term:
  (trm,rhs) -> trm
  where
    parent-tokens-rev := <origin-non-layout-tokens; reverse> trm; 
    rhs-tokens-rev := <origin-non-layout-tokens; reverse> rhs;
    rhs-tokens-rev-brackets := <flatten-list ; reverse> ["(", <origin-non-layout-tokens> rhs, ")"] 
  where
    <equal>(<common-prefix> (rhs-tokens-rev, parent-tokens-rev), rhs-tokens-rev) <+
    <equal>(<common-prefix> (rhs-tokens-rev-brackets, parent-tokens-rev), rhs-tokens-rev-brackets)
    

break-right-associativity-chain(|cons):
  cons#([l,rhs@cons#([m,r])]) -> cons#([l, <break-right-associativity-chain(|cons)> rhs])
  where
  	<in-selected-fragment> r 

break-right-associativity-chain(|cons):
  cons#([l,rhs@cons#([m,r])]) -> cons#([l,m])
  where
  	<not(in-selected-fragment)> r 
  	
broken-child-in-right-associativity-chain(|cons):
  cons#([l,rhs@cons#([m,r])]) -> <broken-child-in-right-associativity-chain(|cons)> rhs
  where
  	<in-selected-fragment> r 

broken-child-in-right-associativity-chain(|cons):
  cons#([l,rhs@cons#([m,r])]) -> r
  where
  	<not(in-selected-fragment)> r 
  	
rules //helpers variabele substitution

is-unbound-svar = 
	where(?CallT(SVar(<id>), _, _); not(has-annos))

is-unbound-tvar = 
	where(?Var(<id>); not(has-annos))
	
svaruse-to-svardec:
  CallT(SVar(name), _, _) -> VarDec(name, ConstType(SortNoArgs("ATerm")))

tvaruse-to-tvardec:
  Var(name) -> VarDec(name, ConstType(SortNoArgs("ATerm")))

