module refactoring/remove-debug

imports
  libstrc

rules //remove debug refactoring

remove-debug-refactoring:
  (_, selected, position, ast, path, project-path) -> 
  (ast-changes, [], <conc> (pre-condition-errors, semantic-errors), warnings)
  where 
    ast-changes := [(selected, <bottomup(try(remove-debug))> selected)];
    pre-condition-errors := [];
    semantic-errors := [];
    warnings := []


rules //remove debug rules

remove-debug:
  Seq(s, <debug-call>) -> s
  
remove-debug:
  Seq(<debug-call>, s) -> s
  
remove-debug:
  GuardedLChoice(<debug-call>, s1, s2) -> s1

remove-debug:
  GuardedLChoice(s1, <debug-call>, s2) -> LChoice(s1, s2)

remove-debug: //TODO: preference because more specific
  GuardedLChoice(Where(s1), s2, <debug-call>) -> IfThen(s1, s2)

remove-debug:
  GuardedLChoice(s1, s2, <debug-call>) -> GuardedLChoice(s1, s2, Id())


//TODO: support some common patterns
//<debug> term ... result not used ???

rules //debug calls

debug-call =
  where(?Where(BA(<debug-call>, Var(_))))

debug-call =
  where(?Where(BA(<debug-call>, NoAnnoList(_))))

debug-call =
  ?CallT(SVar("debug"{_}), _, [])

debug-call =
  ?Where(CallT(SVar("debug"{_}), _, []))