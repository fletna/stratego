module analysis

imports
  libstratego-lib
  libstrc
  desugar
  lib/editor-common

strategies

  analyze-ast:
    (ast, path, project-path) -> ast'
    with
      rules(
        CurrentDir  := <dirname> $[[project-path]/[path]]
        CurrentFile := <base-filename> path
        ProjectDir  := project-path
      );
      if <file-exists> $[[project-path]/.disable-global-analysis] then
        <debug(!"analysis disabled: ")> project-path;
        rules(NoAnalysis: _)
      end;
      if <file-exists> $[[project-path]/.warn-global-analysis] then
        <debug(!"analysis limited to warnings only: ")> project-path;
        rules(WarnAnalysis: _)
      end
    with
      <basic-desugar-top> ast;
      declare-globals-top;
      ast' := <declare-bodies-top>;
      rules(
        DecoratedAst := ast'
      )

  analyze-ast-local =
    if not(bagof-Declaration => [_ | _]) then // TODO: nicer "has done global analysis" check
      declare-globals-top
    end;
    declare-bodies-top

rules // Projections and lookup

  signature-of:
    SDefT(x, s*, t*, s) -> (x, <length> s*, <length> t*)

  signature-of:
    RDecT(x, s*, t*) -> (x, <length> s*, <length> t*)

  signature-of:
    ExtSDef(x, s*, t*) -> (x, <length> s*, <length> t*) 

  signature-of:
    CallT(SVar(x), s*, t*) -> (x, <length> s*, <length> t*)

  signature-of-congruence:
    CallT(SVar(x), s*, []) -> (x, <length> s*) 

  signature-of-congruence:
    SDefT(x, s*, t*, []) -> (x, <length> s*) 

  signature-of:
    Var(x) -> (x, 0)

  signature-of:
    VarDec(x, t) -> (x, 0)

  signature-of:
    Op(x, t*) -> (x, <length> t*)

  signature-of:
    OpDecl(x, t) -> (x, <dec> <occurrences(?ConstType(_))> t) 

  signature-of:
    ExtOpDecl(x, t) -> (x, <dec> <occurrences(?ConstType(_))> t)
    
  signature-of:
    Overlay(x, t*, _) -> (x, <length> t*)

  signature-of:
    Rec(x, s) -> (x, 0, 0)

  signature-of:
    LabeledDynRuleScopeId(x, _) -> x

  signature-of:
    DynRuleScopeId(x) -> x

  is-constructor =
    (?(_, _); DeclareCookie; Declaration <+ declaration-of);
    (?OpDecl(_, _) + ?ExtOpDecl(_, _))

  is-congruence-signature:
    (x, s, 0) -> (x, s, [])
    where
      <DeclareCookie> (x, s)

  declare-cookie-of =
    signature-of; DeclareCookie
  <+
    signature-of-congruence; DeclareCookie

  declaration-of =
    signature-of; (?_{<Declaration>} <+ ?(_{<Declaration>}, _) <+ ?(_{<Declaration>}, _, _))
  <+
    signature-of-congruence => (_{<Declaration>}, _)

rules // Helpers
  
  declare-definition:
    def -> cookie
    with
      sig := <signature-of>;
      if not(cookie := <DeclareCookie> sig) then
        cookie := <new-cookie>;
        rules(
          DeclareCookie: sig -> cookie
          Declaration: cookie -> def
        )
      end

  redeclare-definition:
    def -> cookie
    with
      sig := <signature-of>;
      cookie := <new-cookie>;
      rules(
        DeclareCookie: sig -> cookie
        Declaration: cookie -> def
      )

  /*internal*/ require(s) =
    not(s)

  is-declared =
    one(?_{cookie} + ?SVar(_{cookie}))

  new-cookie =
    if-java-platform(SRTS-EXT-newint);
    if-c-platform(new)

  external SRTS-EXT-newint(|)
    
rules // Declare globals

  declare-globals-top =
    if not(NoAnalysis) then
      with(<declare-globals> Import("libstratego-lib"));
      alltd(declare-globals)
    end

  declare-globals:
    SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
    with
      x' := x{<declare-definition>};
      s' := <topdown(try(declare-dynrule))> s

  declare-globals:
    ExtSDef(x, s*, t*) -> <id>
    with
      redeclare-definition

  declare-globals:
    OpDecl(x, t) -> OpDecl(x', t)
    with
      x' := x{<redeclare-definition>}

  declare-globals:
    ExtOpDecl(x, t) -> <id>
    with
     redeclare-definition
  
  declare-globals:
    Overlay(x, t, d) -> Overlay(x', t, d)
    with
      x' := x{<declare-definition>}

  declare-globals:
    Import(x) -> Import(x)
    where
      not(!x => COMPLETION(_))
    where
      <IsImported> x
    <+
      rules(IsImported: x);
      <import-library> x;
      declare-globals-top
    <+
      path := <try(resolve-import-path)> $[[x].str];
      if not(!$[[<CurrentDir>]/[<CurrentFile>]] => path) then
        (import-from-cache <+ debug(!"not cached:"); import-rtree <+ import-str);
        declare-globals-top
      end
    <+
      rules(
        MissingImports :+= x
        IsImportedFailed: x
      )

  declare-globals:
    ImportWildcard(x) -> ImportWildcard(x)
    where
      IsImported
    <+
      rules(IsImported: ImportWildcard(x));
      path := <resolve-import-path> x;
      readdir;
      dr-ignore-state(
        list-loop(
          if has-extension(|"str") then
            try(<declare-globals> Import($[[path]/[<remove-extension>]]))
          end
        )
      | "MissingImports"
      )
    <+
      rules(
        MissingImports :+= x
        IsImportedFailed: x
      )

  import-library =
    <pack-stratego-parse-stratego> (IncludeFromPath(<id>), [])

   import-from-cache:
     str -> signatures
     where
       cached := <import-cache-path>;
       <is-newer> (cached, str);
       signatures := <file-exists; ReadFromFile> cached

   import-rtree:
     str -> signatures
     where
       rtree := <try(resolve-import-path)> <guarantee-extension(|"rtree")>;
       (<is-newer> (rtree, str) + not(<file-exists> str));
       signatures := <file-exists; ReadFromFile; to-signatures> rtree
     with
       <WriteToBinaryFile> (<import-cache-path>, signatures)        

   import-str:
     str -> signatures
     where
       file-exists;
       parse-stratego-file; // uses Spoofax/IMP override for .meta support
       signatures := <to-signatures>
     with
       <WriteToBinaryFile> (<import-cache-path>, signatures)        

   to-signatures =
     basic-desugar-top;
     topdown(try(remove-stratego-bodies))

   remove-stratego-bodies:
     SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
     with
       s' := <collect-all(?RDecT(_, _, _))> s
   
   remove-stratego-bodies:
     Import(_) -> ()
   
   remove-stratego-bodies:
     ImportWildcard(_) -> ()

   resolve-import-path:
     x -> full-path
     where
        // FIXME: fetch true import paths from someplace
        full-path := <file-exists> $[[<CurrentDir>]/[x]]
     <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
     <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
     <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
     <+ full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
     <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
     <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
     <+ full-path := <file-exists> $[[<CurrentDir>]/../[x]]
     <+ full-path := <file-exists> $[[<CurrentDir>]/../../[x]]
     <+ full-path := <file-exists> $[[<CurrentDir>]/../../../[x]]
     <+ full-path := <file-exists> $[[<CurrentDir>]/../../../../[x]]

   import-cache-path:
     full-path -> cache-path
     with
       cache-dir  := <file-exists <+ mkdir> $[[<ProjectDir>]/.cache];
       full-path' := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
       cache-path := $[[cache-dir]/[full-path'].sig]

  is-newer:
    (file1, file2) -> <id>
    where
      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 

  declare-dynrule:
    dec @ RDecT(x, s*, t*) -> RDecT(x', s*, t*)
    where
      not(!x => COMPLETION(_))
    with
      x' := x{<declare-cookie-of>}
    <+
      cookie := <new-cookie>;
      x'  := x{cookie};
      s'* := <length> s*;
      t'* := <length> t*;
      sig := (x, s'*, t'*);
      rules(
        DeclareCookie: sig -> cookie
        DeclareCookie: x -> cookie
        Declaration: cookie -> dec
      );
      // See https://svn.strategoxt.org/repos/StrategoXT/strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str
      ![ "new", "undefine", "aux", "once", "bagof", "reversebagof", "bigbagof", "all-keys"
       , "innermost-scope", "break", "break-to-label", "break-bp", "continue", "continue-to-label"
       , "throw", "chain", "bigchain", "fold", "bigfold" ];
      list-loop({prefix, sig, cookie':
        ?prefix;
        sig := ($[[prefix]-[x]], s'*, t'*);
        rules(DeclareCookie: sig -> cookie)
      })

  dr-scope-declare-cookies(defs, s):
    t -> t'
    with
      defs        := <defs>;
      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
      t'          := <s> t;
      <list-loop({
        ?(sig, cookie);
        if !cookie => () then
          rules(DeclareCookie :- sig)
        else
          rules(DeclareCookie : sig -> cookie)
        end
       })> old-cookies

rules // Declarations inside definition bodies

  declare-bodies-top =
    alltd(propose-completion <+ declare-bodies)

  declare-bodies:
    SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
    with
      {| DeclareCookie:
        s'* := <map(declare-svar)> s*;
        t'* := <map(declare-tvar)> t*;
        s'  := <declare-bodies-top> s
      |}

  declare-bodies:
    Let(d*, b) -> Rec(d'*, b')
    with
      dr-scope-declare-cookies(
        !d*
      ,
        d'* := <map(declare-let-definition)> d*;
        b'  := <declare-bodies-top> b
      )

  declare-let-definition:
    SDefT(x, s*, t*, s) -> SDefT(x', s'*, t'*, s')
    with
      dr-scope-declare-cookies(
        ![s*, t*]
      ,
        x'  := x{<redeclare-definition>};
        s'* := <map(declare-svar)> s*;
        t'* := <map(declare-tvar)> t*;
        s'  := <declare-bodies-top> s
      )

  declare-bodies:
    rec @ Rec(r, b) -> Rec(r', b')
    with
      dr-scope-declare-cookies(
        ![rec]
      ,
        r' := r {<redeclare-definition> rec};
        b' := <declare-bodies-top> b
      )

  declare-bodies:
    Overlay(x, t*, d) -> Overlay(x, t'*, d')
    with
      {| DeclareCookie:
        t'* := <map(declare-tvar)> t*;
        d'  := <declare-bodies-top> d 
      |}

  declare-bodies:
    ScopeDefault(s) -> ScopeDefault(s')
    with
      {| DeclareCookie:
        with(
          tvars;
          list-loop({
            sig := (<id>, 0); rules(DeclareCookie :- sig)
          })
        );
        s' := <declare-bodies-top> s
      |}

  declare-bodies:
    Scope(v*, s) -> Scope(v*, s')
    with
      {| DeclareCookie:
        <list-loop({?x; rules(DeclareCookie :- x)})> v*;
        s' := <declare-bodies-top> s
      |}

  declare-bodies:
    Match(t) -> Match(t')
    with
      t' := <declare-match> t

  declare-bodies:
    Rule(t1, t2, w) -> Rule(t1', t2', w')
    with
      t1' := <declare-match> t1;
      w'  := <declare-bodies-top> w;
      t2' := <declare-bodies-top> t2 

  declare-bodies:
    LRule(r) -> LRule(r')
    with
      {| DeclareCookie: // acts as a non-blanking scope
        r' := <declare-bodies-top> r
      |}

  declare-bodies:
    SetDynRule(x, r) -> SetDynRule(x', r')
    with
      {| DeclareCookie: // acts as a non-blanking scope
        x' := <declare-bodies-top> x;
        r' := <declare-bodies-top> r
      |}

  declare-bodies:
    DynRuleScopeId(x) -> DynRuleScopeId(x')
    where
      x' := x{<declare-cookie-of>} 

  declare-bodies:
    LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
    where
      x' := x{<signature-of; DeclareCookie>}; 
      t' := <declare-bodies-top> t

  declare-bodies:
    Assign(t1, t2) -> Assign(t1', t2')
    with
      t2' := <declare-bodies-top> t2;
      t1' := <declare-match> t1

  declare-bodies:
    AM(s, t) -> AM(s', t')
    with
      s' := <declare-bodies-top> s;
      t' := <declare-match> t

  declare-match =
    alltd(?Var(_); declare-var + ?App(_, _) + ?RootApp(_));
    declare-bodies-top

  declare-bodies:
    GuardedLChoice(c, s1, s2) -> GuardedLChoice(c', s1', s2')
    with
      c' := <declare-bodies-top> c
    with
      s1' := <declare-bodies-top> s1
    \DeclareCookie/
      s2' := <declare-bodies-top> s2

  declare-svar:
    dec @ VarDec(x, t) -> VarDec(x', t)
    with
      cookie := <new-cookie>;
      x'     := x{cookie};
      rules(
        DeclareCookie: (x, _, _) -> cookie
        Declaration: cookie -> dec
      )

  declare-tvar:
    x -> x'
    where
      <is-string> x
    with
      x' := x{<declare-definition> Var(x)}

  declare-tvar:
    VarDec(x, t) -> VarDec(x', t)
    with
      x' := x{<declare-definition>}

  declare-var:
    Var(x) -> Var(x')
    with
      x' := x{<declare-definition>}

  declare-bodies:
    Var(x{}) -> Var(x')
    where
      x' := x{<declare-cookie-of>}

rules // Uses inside definition bodies

  declare-bodies:
    CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
    with
      x' := x{<declare-cookie-of>}
    <+
      x' := x
    with
      t'* := <declare-bodies-top> t*;
      s'* := <map(declare-bodies-svar <+ declare-bodies-top)> s*

  declare-bodies-svar:
    CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
    where
      x' := x{<declare-cookie-of>}
    <+
      fail // TODO: special exception for higher-order args

  declare-bodies:
    Op(x, t*) -> Op(x', t'*)
    where
      x' := x{<declare-cookie-of>}
    with
      t'* := <declare-bodies-top> t*

rules // Content completion

  propose-completion:
    completion -> proposals
    where
      signature-of; one(?COMPLETION(prefix)) <+ one(?COMPLETION(prefix))
    with
      all-signatures := <filter-by-prefix(|prefix)> <all-keys-DeclareCookie>;
      switch !completion
        case ?Var(_):
          all-signatures' := <try(filter(?(_, _)); not([]))> all-signatures
        case ?SVar(_):
          all-signatures' := <filter(?(_, _, _))> all-signatures
        case ?DynRuleScopeId(_):
          all-signatures' := <filter(?(_, _, _); not(is-congruence-signature))> all-signatures
        case ?Import(_):
          all-signatures' := []
        otherwise: // unknown context
          all-signatures' := <filter(not(is-congruence-signature))> all-signatures
      end;
      proposals := <map(signature-to-proposal)> all-signatures';
      rules(
        ContentProposals := proposals
      )
  
  propose-completion:
    Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
    where
      <not(oncetd(?RootApp(_) + ?App(_, _)))> lhs
    with
      lhs'      := <topdown(try(\As(_, e) -> e\))> lhs;
      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs];
      rules(
        ContentProposals := proposals
      )
  
  filter-by-prefix(|prefix) =
    filter(one(string-starts-with(|prefix); not(?"")))
  
  signature-to-proposal:
    (x, 0) -> ([x | parentheses], "")
    with
      if is-constructor then
        parentheses := ["()"]
      else
        parentheses := []
      end

  signature-to-proposal:
    (x, n) -> ([x, "(", t*, ")"], "")
    where
      <gt> (n, 0)
    with
      t* := <separate-by(|", ")> <copy> (n, "t")

  signature-to-proposal:
    (x, 0, 0) -> ([x, ""], "")

  signature-to-proposal:
    (x, n, 0) -> ([x, "(", t*, ")"], "")
    where
      <gt> (n, 0)
    with
      t* := <separate-by(|", ")> <copy> (n, "s")

  signature-to-proposal:
    (x, n, m) -> ([x, "(", s*, "|", t*, ")"], "")
    where
      <gt> (m, 0)
    with
      s* := <separate-by(|", ")> <copy> (n, "s");
      t* := <separate-by(|", ")> <copy> (m, "t")

rules // Constraints

  global-constraint-error:
    CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
    where
      require(is-declared)

  global-constraint-error:
    Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
    where
      require(is-declared)

  constraint-error:
    Var(x) -> (x, $[Variable '[x]' is not declared])
    where
      require(is-declared)

  global-constraint-error:
    Import(x) -> (x, $[Unable to import '[x]'])
    where
      require(not(<IsImportedFailed> x))

  global-constraint-error:
    DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
    where
      require(is-declared)

  global-constraint-error:
    LabeledDynRuleId(x, _) -> (x, $[Dynamic rule '[x]' not defined])
    where
      require(is-declared)

  constraint-error:
    AnnoDef(a*, sdef @ SDefT(x, _, _, _)) -> (a*, $[No external strategy or rule '[x]'])
    with
      if not(!a* => []) then
        sig := <signature-of> sdef;
        rules(IsNoConflict: sdef)
      end
    where
      require(
        !a* => []
      + !a* => [Internal()]
      + <declaration-of> sdef => ExtSDef(_, _, _)
      )

  global-constraint-error:
    SDefT(x{cookie}, s*, t*, s) -> (x, $[Conflicts with external definition of '[x]'])
    where
      require(
        <Declaration> cookie => SDefT(_, _, _, _)
      <+
        IsNoConflict
      )

  // FIXME: name sdefs after constructors to fix constructor conflict errors 
  constraint-error:
    OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
                              (y, $[Conflicts with constructor [x]/[<length> s*]])]
    where
      require(not(<Declaration> cookie => y @ SDefT(y_name, _, _, _)))

  constraint-error:
    Build(t) -> <constraint-error-bad-build> t

  constraint-error:
    Assign(_, t) -> <constraint-error-bad-build> t

  constraint-error:
    Rule(_, t, _) -> <constraint-error-bad-build> t

  constraint-error:
    Match(t) -> <constraint-error-bad-match> t

  constraint-error:
    Assign(t, _) -> <constraint-error-bad-match> t

  constraint-error:
    AM(_, t) -> <constraint-error-bad-match> t

  constraint-error:
    Rule(t, _, _) -> <constraint-error-bad-match> t

  constraint-error-bad-build:
    t -> matches
    where
      collect(?RootApp(_) + ?App(_, _) + Wld + ?As(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
      filter(not(?RootApp(_) + ?App(_, _)));
      map(!(<id>, "Match symbol in build pattern")) => matches;
      require([])

  constraint-error-bad-match:
    t -> builds
    where
      collect(?StringQuotation1(_, _) + ?StringQuotation2(_, _) + ?StringQuotation3(_, _) + ?StringQuotation4(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
      filter(not(?RootApp(_) + ?App(_, _)));
      map(!(<id>, "Build symbol in match pattern")) => builds;
      require([])

  constraint-warning:
    Var(x) -> (x, $[Conflicts with nullary constructor: use '[x]()' instead])
    where
      require(not(is-constructor))

  constraint-warning:
    CallT(SVar(<"debug" + "say">), [t], []) -> (s, $[Should be '![s]'])
    where
      !t => StrCong(s) + !t => IntCong(s)

  constraint-warning:
    Import("Java-15") -> (<id>, "Use 'import libjava-front' instead")

  constraint-warning:
    Module(x, _) -> (x, $[Module name should be qualified with a path relative to the import path])
    where
      not(NoAnalysis);
      <eq> (<base-filename> x, <remove-extension> <CurrentFile>);
      require(<resolve-import-path> $[[x].str])

  constraint-warning:
    Module(x, _) -> (x, $[Module name does not correspond to file name])
    where
      require(<eq> (<base-filename> x, <remove-extension> <CurrentFile>))

  // TODO: overlapping signatures
