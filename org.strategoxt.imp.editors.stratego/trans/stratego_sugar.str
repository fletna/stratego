module stratego_sugar

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstrc
  analysis
  desugar
  lib/editor-common.generated
  rename
  
imports
  signatures/pp
  signatures/project
  signatures/map
  signatures/check
  signatures/constructors
	solver/constraints
	rules/map
	rules/check
	rules/constructors
	utils/utils
	tests/test-all
	to-yuml/to-yuml
	
strategies

rules

  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end);
      dr-scope-all-start
    with
      ast' := <analyze-ast> (ast, path, project-path);
      
      if NoAnalysis then
        errors   := <collect-all(constraint-error, conc)> ast';
        warnings := <collect-all(constraint-warning, conc)> ast'
      else
        if WarnAnalysis then
          errors   := <collect-all(constraint-error, conc)> ast';
          warnings := <collect-all(global-constraint-error + constraint-warning, conc)> ast';
          notes := <collect-all(constraint-note,conc)> ast'
        else
          errors   := <collect-all(global-constraint-error + constraint-error, conc)> ast';
          warnings := <collect-all(constraint-warning, conc)> ast';
          notes := <collect-all(constraint-note,conc)> ast'
        end
      end

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    with
      <basic-desugar-top; analyze-ast-local> ast;
      proposals := <ContentProposals>
 
  /* TODO: return ast' from analysis and use this rule based on the decorated ast
  editor-resolve:
    (selected, position, ast, path, project-path) -> target
    where
      target := <declaration-of> selected
    <+
      target := <declaration-of> <parent-at-position(|position)> ast
  */
  
  editor-resolve:
    (selected, position, ast, path, project-path) -> target
    where
      position' := <desugar-position(basic-desugar|ast)> position
    where
      target := <declaration-of> <term-at-position(|position')> <DecoratedAst>
    <+
      target := <declaration-of> <parent-at-position(|position')> <DecoratedAst>
  
  editor-resolve:
    (Import(x), position, ast, path, project-path) -> target
    where
      target := <parse-stratego-file> <resolve-import-decl> x

  // hover info for constructors
  // editor-hover:
  //   (node, position, ast, path, project-path) -> text
  //   where
		// 	<signature-of> node; // only show definitions
		// 	text := <pp-stratego-string> node
 	
  editor-hover:
  	(node,_,_,_,_) -> text
  	where
  		not(DisableSortAnalysis);
  		<?OpDecl(_,_){decl-id} + ?OpDeclInj(_){decl-id}> node;
  		srt@ConstSig(_,_,_,conf,decl-id) := <get-sort-declaration> decl-id;
  		<collect-all(?CSet(_),conc);map(\ cset -> <substitute(|cset)> srt \)> conf;
  		text := <pp-list(pp-sort-signature-top|"<br/>")>
  
  editor-hover:
  	(SortVar(_){cookie},position,ast,_,_) -> text
  	where
  		not(DisableSortAnalysis);
  		position' := <desugar-position(basic-desugar|ast)> position;
  		ast' := <DecoratedAst>;
  		parent := <parent-at-position(?ConstType(_);has-annos + ?OpDecl(_,_) + ?OpDeclInj(_)|position')> ast'
  	where
  		!parent;
  		(?OpDecl(_,_){decl-id} + ?OpDeclInj(_){decl-id}
  		< 
  			<get-sort-declaration> decl-id;
  			?ConstSig(_,_,_,config,_)
  		+
  			?ConstType(_){config}
  		);
  		<not(?FAIL())> config;
  		<collect-all(?Constraint(cookie,_);get-constrained-var-sort,union)> config;
  		text := <pp-list(pp-sort-signature|" + ")>
  
  editor-hover:
  	(Var(_{cookie}),position,ast,_,_) -> text
  	where
  		not(DisableSortAnalysis);
  		debug(!" HOVER MATCH ");
  		position' := <desugar-position(basic-desugar|ast)> position;
  		ast' := <DecoratedAst>;
  		debug(!" AST' ");
  		<parent-at-position(?SDefT(_, _, _, _){decl-id}|position')> ast';
  		debug(!"H1 ");
  		<get-rule-signature> decl-id;
  		debug(!"H2 ");
  		?RuleSig(_, _, _, in-s, out-s, local-constraints, _);
  		debug(!"H3 ");
  		if(<?[_|_]> local-constraints) then
	  		!ISection(
	  			local-constraints,
	  			ISection(
	  				<map(\ (_,b) -> b \);to-constraint-union;solve-top;not(?FAIL())> in-s,
	  				<map(\ (_,b) -> b \);to-constraint-union;solve-top;not(?FAIL())> out-s
	  			))
	  	else
	  		!ISection(local-constraints,<map(\ (_,b) -> b \);to-constraint-union;solve-top;not(?FAIL())> in-s)
	  	end;
  		debug(!"H5 ");
  		solve-top;
  		debug(!"H6 ");
  		if(?FAIL()) then
  			text := "Failure";
  			debug(!"H7 ")
  		else
  			collect-all(?Constraint(cookie,_);get-constrained-var-sort,union);
  			debug(!"H8 ");
  			text := <pp-list(pp-sort-signature|" + ")>;
  			debug(!"H9 ")
  		end;
  		debug(!"H10 ")
  		
  
  editor-hover:
    (node@ToMetaExpr(_), position, ast, path, project-path) -> text
    where
      str := <meta-explode(false) ; Stratego-Ensugar>node 
    ; text := <concat-strings>["<pre>", <pp-stratego-string>str ,"</pre>"]

  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

  generate-desugared-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <basic-desugar-top> selected
  
  generate-analysed-aterm:
  	(selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"a.aterm")> path;
      result   := <DecoratedAst> selected
  
  // FIXME: for debugging only
  generate-signatures:
  	(selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"sig.aterm")> path;
      if(not(DisableSortAnalysis)) then
	      // all-keys-DeclaredSort;
	      // mapconcat(bagof-DeclaredSort);
	      // mapconcat(bagof-SortSig) => signatures;
	      get-all-sort-declarations => signatures;
	      all-keys-SortCookie => cookies;
	      all-keys-DeclaredRule;
	      mapconcat(bagof-DeclaredRule);
	      mapconcat(bagof-RuleSig) => rulez;
	      result := [signatures,cookies,rulez]
	  	else
	  		result := "Sort analysis is disabled for this project (.disable-sort-analysis)"
	  	end
      
  run-tests = test-all
  	
	generate-yuml-signatures:
		(selected, _, _, path, _)  -> (filename,result)
		with
			filename := <guarantee-extension(|"yuml")> path;
			<DecoratedAst> selected;
			if(DisableSortAnalysis) then
				result := "Sort analysis is required to generate yUML diagrams. It is currently disabled"
			else
				result := <generate-all-yuml>
			end
			 

