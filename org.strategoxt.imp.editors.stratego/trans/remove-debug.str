module remove-debug

imports
  libstrc
  lib-reconstruction/construct-text

rules //remove debug refactoring

  remove-debug-refactoring:
    (_, selected, position, ast, path, project-path) -> 
    (ast-changes, [], <conc> (pre-condition-errors, semantic-errors), warnings)
    where 
    	ast-changes := [(selected, <topdown(try(remove-debug))> selected)];
    	pre-condition-errors := [];
    	semantic-errors := [];
    	warnings := []

  remove-debug-builder:
    (selected, position, ast, path, project-path) -> ("x.aterm", <construct-textual-change(fail)> ast-change)
    where 
    	ast-change := (selected, <topdown(try(remove-debug))> selected)
    	

rules //remove debug rules

  remove-debug:
  	Seq(s, <debug-call>) -> s
  	
  remove-debug:
  	Seq(<debug-call>, s) -> s
  	
  remove-debug:
  	GuardedLChoice(<debug-call>, s1, s2) -> s1

  remove-debug:
  	GuardedLChoice(s1, <debug-call>, s2) -> LChoice(Where(s1), s2)

  remove-debug:
  	GuardedLChoice(s1, s2, <debug-call>) -> Seq(Where(s1), s2)

  //support some common patterns
  //where(<debug> term)

  debug-call =
  	?CallT(SVar("debug"{_}), _, [])