module elaborate

imports
  signatures/stratego/-
  signatures/stratego/sugar/-
  signatures/stratego/core/-
  analysis
  statixruntime
  pp
  pp/-
  
  signature
  constructors 
    SDefTypeCheck : ID * ID * List(Type) -> Def
    CastValStrat : Strategy
    

rules // insert casts

  insert-casts = insert-casts(|"")
  
  insert-casts(|path) :
      ast -> ast'
    where 
      indexed-ast := <stx-index-ast(|path)> ast
    ; ast' := <stx-evaluate(|"static-semantics", "insertCasts")> [indexed-ast]

rules // insert type checks

  insert-typechecks: Module(name, sections) -> Module(name, sections')
    where
      cons := <collect-all(?OpDecl(_, _)); map(transform-typecheck)> sections
    ; typechecker := SDefT(
          "cast-value"
        , [DefaultVarDec("s")]
        , [DefaultVarDec("typ")]
        , LChoice(
            CallNoArgs(SVar("s"))
          , Seq(
            Match(Var("a")), 
            CallT(
                SVar("report-failure")
              , []
              , [ App(
                    CallNoArgs(SVar("concat-strings"))
                  , NoAnnoList(
                      List(
                        [NoAnnoList(Str("\"Cast to \"")), Var("typ"), NoAnnoList(Str("\" failed\""))]
                      )
                    )
                  ),
                  Var("a")
                ]
              )
            )
          )
        )
      ; sections' := <conc> (sections, [Rules([typechecker|cons])])
  
  transform-typecheck :
  OpDecl(name, FunType(args, ConstType(SortNoArgs(typ)))) -> SDefNoArgs(typ', Match(NoAnnoList(Op(name, args'))))
    where
      typ' := <conc-strings> ("strategoGradual--is-a-", typ)
    ; args' := <map(insert-typecheck-arg)> args

  transform-typecheck :
  OpDecl(name, ConstType(SortNoArgs(typ))) -> SDefNoArgs(typ', Match(NoAnnoList(Op(name, []))))
    where
      typ' := <conc-strings> ("strategoGradual--is-a-", typ)

  insert-typecheck-arg = !Wld()
  
  remove-rule-declarations = topdown(try(remove-rule-declaration))
  remove-rule-declaration : Strategies(rs) -> Strategies(<filter(not(rule-declaration))> rs)
  remove-rule-declaration : Rules(rs) -> Rules(<filter(not(rule-declaration))> rs)
  
  rule-declaration = ?RDeclNoArgs(_, _)
  rule-declaration = ?RDecl(_, _, _)
  rule-declaration = ?RDeclT(_, _, _, _)

rules // cast terms

  transform-cast-terms = topdown(try(transform-cast-term))
  
  transform-cast-term :
      CastTerm(e, _, SRT(t)) ->App(
        CallT(SVar("cast-value"), [CallNoArgs(SVar(name))], [NoAnnoList(Str(nameQ))])
      , e
      )
    where
      name := <conc-strings> ("strategoGradual--is-a-", t)
    ; nameQ := <concat-strings> ["\"", t, "\""]
    
  transform-cast-term :
    OfType(e, SRT(t)) -> App(
      CallT(SVar("cast-value"), [CallNoArgs(SVar(name))], [NoAnnoList(Str(nameQ))])
    , e
    )
  where
    name := <conc-strings> ("strategoGradual--is-a-", t)
  ; nameQ := <concat-strings> ["\"", t, "\""]
  

rules // menu items

  menu-source-elaborate:
      (source-ast, _, _, path, project-path) -> (filename, elaborated-ast)
    with
      filename := <guarantee-extension(|"elaborated.aterm")> path
    ; analyzed-ast := <insert-casts(|path);insert-typechecks> source-ast
    ; elaborated-ast := <strip-annos> analyzed-ast
 
  menu-source-insert-casts-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"elaborated.strg")> path
    ; transformed-ast := <insert-casts(|path)> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
    
  menu-source-transform-casts-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"cst.strg")> path
    ; transformed-ast := <transform-cast-terms> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
    
  menu-source-insert-typechecks-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"tchk.strg")> path
    ; transformed-ast := <insert-typechecks> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
    
  menu-source-elaborate-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"el.str")> path
    ; transformed-ast := <insert-casts(|path);insert-typechecks;transform-cast-terms;remove-rule-declarations> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
