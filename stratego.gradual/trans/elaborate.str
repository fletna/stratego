module elaborate

imports
  signatures/-
  signatures/sugar/-
  analysis
  statixruntime
  pp
  
  signature
  constructors 
    SDefTypeCheck : ID * ID * List(Type) -> Def
    SDefNoArgs : ID * Strategy -> Def
    CastTerm : Term * TYPE * TYPE -> TERM

rules // insert casts

  insert-casts = insert-casts(|"")
  
  insert-casts(|path) :
      ast -> ast'
    where 
      indexed-ast := <stx-index-ast(|path)> ast; 
      ast' := <stx-evaluate(|"static-semantics", "insertCasts")> [indexed-ast]

rules // insert type checks

  insert-typechecks = topdown(try(insert-typecheck))
  
  insert-typecheck :
      SDefTypeCheck(typ, name, args) -> RDefNoArgs(typ', Rule(op, op, []))
    where 
      typ' := <conc-strings> ("strategoGradual--is-a-", typ)
    ; args' := <map(insert-typecheck-arg)> args
    ; op := NoAnnoList(Op(name, args'))
  
  insert-typecheck-arg = !Var(<newname> "sg_")

rules // cast terms

  transform-cast-terms = topdown(try(transform-cast-term))
  
  transform-cast-term :
      CastTerm(e, _, SRT(t)) -> App(CallNoArgs(SVar(name)), e)
    where
      name := <conc-strings> ("strategoGradual--is-a-", t)

rules // menu items

  menu-source-elaborate:
      (source-ast, _, _, path, project-path) -> (filename, elaborated-ast)
    with
      filename := <guarantee-extension(|"elaborated.aterm")> path
    ; analyzed-ast := <insert-casts(|path)> source-ast
    ; elaborated-ast := <insert-typechecks;strip-annos> analyzed-ast
 
  menu-source-insert-casts-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"elaborated.strg")> path
    ; transformed-ast := <insert-casts(|path)> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
    
  menu-source-transform-casts-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"cst.strg")> path
    ; transformed-ast := <transform-cast-terms> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
    
  menu-source-insert-typechecks-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"tchk.strg")> path
    ; transformed-ast := <insert-typechecks> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
    
  menu-source-elaborate-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"el.strg")> path
    ; transformed-ast := <insert-casts(|path);transform-cast-terms;insert-typechecks> source-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
