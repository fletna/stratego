module elaborate

imports
  signatures/-
  signatures/sugar/-
  analysis
  statixruntime
  pp
  //desugar
  
  signature sorts SDefTypeCheck
  constructors 
    SDefTypeCheck : ID * Strategy -> Def
    SDefNoArgs : ID * Strategy -> Def
    CastTerm : Term * TYPE * TYPE -> TERM

rules

//  menu-analyzed-elaborate:
//      (analyzed-ast, _, _, path, project-path) -> (filename, elaborated-ast)
//    with
//      filename := <guarantee-extension(|"elaborated.aterm")> path
//    ; elaborated-ast := <elaborate> analyzed-ast
//
//  menu-analyzed-elaborate-pp:
//      (analyzed-ast, _, _, path, project-path) -> (filename, pretty-printed)
//    with
//      filename := <guarantee-extension(|"elaborated.glc")> path
//    ; elaborated-ast := <elaborate> analyzed-ast
//    ; pretty-printed := <pp-gtlc-string> Elaborate(analyzed-ast, elaborated-ast)

  insertCasts = insertCasts(|"")
  
  insertCasts(|path) :
    ast -> ast'
    where 
      indexed-ast := <stx-index-ast(|path)> ast; 
      ast' := <stx-evaluate(|"static-semantics", "insertCasts")> [indexed-ast]
      
  transform-type-checks = topdown(try(transform-type-check))
  
  transform-type-check : SDefTypeCheck(typ, strat) -> SDefNoArgs(typ', strat)
  where typ' := <conc-strings> ("strategoGradual--is-a-", typ)
  
  transform-type-check = fail

  transform-cast-terms = topdown(try(transform-cast-term))
  
  transform-cast-term : CastTerm(e, _, SRT(t)) -> App(CallNoArgs(SVar(name)), e)
  where
    name := <conc-strings> ("strategoGradual--is-a-", t)
  
  menu-source-elaborate:
      (source-ast, _, _, path, project-path) -> (filename, elaborated-ast)
    with
      filename := <guarantee-extension(|"elaborated.aterm")> path
    ; debug(!"a: ")
    ; desugared-ast := <desugar-all> source-ast
    ; debug(!"b: ")
    ; analyzed-ast := <insertCasts(|path)> desugared-ast
    ; debug(!"c: ")
    ; elaborated-ast := <elaborate;strip-annos> analyzed-ast
    ; debug(!"d: ")
    
  desugar-all = id

  elaborate = id 
 
  menu-source-elaborate-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"elaborated.strg")> path
    ; desugared-ast := <desugar-all> source-ast
    ; analyzed-ast := <insertCasts(|path)> desugared-ast
    ; elaborated-ast := <elaborate;transform-type-checks> analyzed-ast
    ; pretty-printed := <pp-StrategoGradual-string> elaborated-ast
    
  menu-source-transform-casts-pp:
      (source-ast, _, _, path, project-path) -> (filename, pretty-printed)
    with
      filename := <guarantee-extension(|"cst.strg")> path
    ; desugared-ast := <desugar-all> source-ast
    ; transformed-ast := <transform-cast-terms> desugared-ast
    ; pretty-printed := <pp-StrategoGradual-string> transformed-ast
