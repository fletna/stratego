module pp/nabl2/shared/constraints/Base-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libstratego-sglr
  signatures/nabl2/shared/constraints/Base-sig


imports
  signatures/nabl2/shared/common/Identifiers-sig
  signatures/nabl2/shared/common/Messages-sig
  signatures/nabl2/shared/common/CTerms-sig


imports
  pp/nabl2/shared/common/Identifiers-pp
  pp/nabl2/shared/common/Messages-pp
  pp/nabl2/shared/common/CTerms-pp


strategies
  prettyprint-example =
    prettyprint-NaBL2

  prettyprint-NaBL2 =
    fail

  prettyprint-NaBL2(|sort) =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-NaBL2-start-symbols

  prettyprint-NaBL2-start-symbols =
    fail


strategies
  prettyprint-NaBL2 =
    prettyprint-NaBL2-NaBL2-Constraint

  prettyprint-NaBL2(|sort):
    t -> <prettyprint-NaBL2-NaBL2-Constraint>
    where <?"NaBL2-Constraint"> sort

  prettyprint-NaBL2-NaBL2-Constraint :
    CTrue(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("true "), t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-NaBL2-NaBL2-MessagePosition) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-NaBL2-NaBL2-Constraint =
    ?CTrue(_)

  NaBL2-get-indent :
    (t@CTrue(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  NaBL2-get-separator :
    (t@CTrue(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  NaBL2-get-leading-ws :
    (t@CTrue(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-NaBL2-NaBL2-Constraint :
    CFalse(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("false "), t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-NaBL2-NaBL2-Message) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-NaBL2-NaBL2-Constraint =
    ?CFalse(_)

  NaBL2-get-indent :
    (t@CFalse(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  NaBL2-get-separator :
    (t@CFalse(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  NaBL2-get-leading-ws :
    (t@CFalse(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-NaBL2-NaBL2-Constraint :
    Parenthetical(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("( ")
                               , t1__'
                               , S(" )")
                               ]
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-NaBL2-NaBL2-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-NaBL2-NaBL2-Constraint :
    CConj(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(",")]
                           )
                         , H(
                             [SOpt(HS(), "0")]
                           , [t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-NaBL2-NaBL2-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-NaBL2-NaBL2-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-NaBL2-NaBL2-Constraint =
    ?CConj(_, _)

  NaBL2-get-indent :
    (t@CConj(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  NaBL2-get-separator :
    (t@CConj(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  NaBL2-get-leading-ws :
    (t@CConj(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := "\n"
           otherwise :
             ws := ""
         end

  prettyprint-NaBL2-NaBL2-Constraint :
    CExists(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ S("{ ")
                               , t1__'
                               , S(":")
                               ]
                             )
                           , t2__'
                           , H(
                               [SOpt(HS(), "0")]
                             , [S("}")]
                             )
                           ]
    with t1__' := <pp-H-list(prettyprint-NaBL2-NaBL2-CVar|" ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-indent(|"2")> [ <pp-one-Z(prettyprint-NaBL2-NaBL2-Constraint) <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                    ]

  is-NaBL2-NaBL2-Constraint =
    ?CExists(_, _)

  NaBL2-get-indent :
    (t@CExists(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := "  "
           otherwise :
             indent := ""
         end

  NaBL2-get-separator :
    (t@CExists(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             separator := " "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  NaBL2-get-leading-ws :
    (t@CExists(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := "\n  "
           otherwise :
             ws := ""
         end

  prettyprint-NaBL2-NaBL2-Constraint :
    CNew(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("new ")
                            , t1__'
                            , S(" ")
                            , t2__'
                            ]
                          )
                        ]
    with t1__' := <pp-H-list(prettyprint-NaBL2-NaBL2-CVar|" ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-NaBL2-NaBL2-MessagePosition) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-NaBL2-NaBL2-Constraint =
    ?CNew(_, _)

  NaBL2-get-indent :
    (t@CNew(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  NaBL2-get-separator :
    (t@CNew(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             separator := " "
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  NaBL2-get-leading-ws :
    (t@CNew(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NaBL2-Constraint"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-NaBL2-NaBL2-Constraint =
    fail

  prettyprint-NaBL2-NaBL2-Constraint :
    amb([h|hs]) -> <prettyprint-NaBL2-NaBL2-Constraint> h

  prettyprint-NaBL2-NaBL2-Message :
    NaBL2-Message-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$NaBL2-Message")]
                               )
                             ]

  is-NaBL2-NaBL2-Message =
    ?NaBL2-Message-Plhdr()

  prettyprint-NaBL2-NaBL2-Constraint :
    NaBL2-Constraint-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$NaBL2-Constraint")]
                                  )
                                ]

  is-NaBL2-NaBL2-Constraint =
    ?NaBL2-Constraint-Plhdr()

  prettyprint-NaBL2-NaBL2-CVar :
    NaBL2-CVar-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$NaBL2-CVar")]
                            )
                          ]

  is-NaBL2-NaBL2-CVar =
    ?NaBL2-CVar-Plhdr()

  prettyprint-NaBL2-NaBL2-MessagePosition :
    NaBL2-MessagePosition-Plhdr() -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$NaBL2-MessagePosition")]
                                       )
                                     ]

  is-NaBL2-NaBL2-MessagePosition =
    ?NaBL2-MessagePosition-Plhdr()

  prettyprint-NaBL2-NaBL2-Message :
    NaBL2-Message-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$NaBL2-Message")]
                                )
                              ]

  is-NaBL2-NaBL2-Message =
    ?NaBL2-Message-Plhdr(_)

  prettyprint-NaBL2-NaBL2-Constraint :
    NaBL2-Constraint-Plhdr(_) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$NaBL2-Constraint")]
                                   )
                                 ]

  is-NaBL2-NaBL2-Constraint =
    ?NaBL2-Constraint-Plhdr(_)

  prettyprint-NaBL2-NaBL2-CVar :
    NaBL2-CVar-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$NaBL2-CVar")]
                             )
                           ]

  is-NaBL2-NaBL2-CVar =
    ?NaBL2-CVar-Plhdr(_)

  prettyprint-NaBL2-NaBL2-MessagePosition :
    NaBL2-MessagePosition-Plhdr(_) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("$NaBL2-MessagePosition")]
                                        )
                                      ]

  is-NaBL2-NaBL2-MessagePosition =
    ?NaBL2-MessagePosition-Plhdr(_)


strategies
  prettyprint-NaBL2 =
    prettyprint-NaBL2-NaBL2-ConstraintPriority

  prettyprint-NaBL2(|sort):
    t -> <prettyprint-NaBL2-NaBL2-ConstraintPriority>
    where <?"NaBL2-ConstraintPriority"> sort

  prettyprint-NaBL2-NaBL2-ConstraintPriority =
    ![S(<is-string>)]

  prettyprint-NaBL2-NaBL2-ConstraintPriority :
    amb([h|hs]) -> <prettyprint-NaBL2-NaBL2-ConstraintPriority> h


strategies
  prettyprint-NaBL2 =
    prettyprint-NaBL2-NaBL2-Keyword

  prettyprint-NaBL2(|sort):
    t -> <prettyprint-NaBL2-NaBL2-Keyword>
    where <?"NaBL2-Keyword"> sort

  prettyprint-NaBL2-NaBL2-Keyword =
    ![S(<is-string>)]

  prettyprint-NaBL2-NaBL2-Keyword :
    amb([h|hs]) -> <prettyprint-NaBL2-NaBL2-Keyword> h