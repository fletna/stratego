module lib-refactoring/files

imports
lib/editor-common.generated

rules //strategies for collecting files and asts

/**
 * Collects asts by recursively visiting the files in the source dirs, starting at a root dir
 * Unparseble files are collected as well 
 * @type String -> (List(AST), List(Strings)) 
 */
get-source-asts(|extensions, source-dirs):
  dir-path -> (asts, parse-failures)
  where
    (asts, parse-failures) := 
      <get-source-asts(check-extension(|extensions), elem-of(|source-dirs))> dir-path

get-source-asts(is-source-file, is-source-dir):
  dir-path -> (asts, parse-failures)
  where
    files := <get-source-files(is-source-file, is-source-dir)> dir-path;
    (asts, parse-failures) := <parse-source-files> files

/**
 * @type List(String) -> (List(AST), List(Strings)) 
 */
parse-source-files :
  filenames -> (asts, parse-failures)
  where
    (asts, parse-failures) := <partition(parse-file)> filenames
  
get-source-files(|extensions, source-dirs):
  dir-path -> files
  where
    files := <get-source-files(check-extension(|extensions), elem-of(|source-dirs))> dir-path

/**
 * Collects source files by recursively visiting source directories starting at a root dir 
 * @type String -> List(Strings) 
 */
get-source-files(is-source-file, is-source-dir):
  dir-path -> files
  where 
    if <where(is-source-dir); isdir> dir-path then
      files := < 
        readdir; 
        map(!$[[dir-path]/[<id>]]);  
        map(
          where(is-source-file)  <+ 
          (get-source-files(is-source-file, is-source-dir))
        ); 
        flatten-list> dir-path 
    else
      files := []
    end

//save-all-resources = where(prim("SSL_EXT_saveresources", ""))

check-extension(|ext) =
  has-extension(|ext)

check-extension(|extensions):
  fname -> fname
  where
    ext := <get-extension> fname; 
    <fetch(equal(|ext))> extensions 
  
elem-of(|lst):
  el -> el
  where
    <elem>(el, lst) 
  
is-spoofax-dir:
  dir -> dir
  where 
    spoofax-dirs; 
    fetch(equal(|dir)) 

/**
 * List of directories that are created for Spoofax projects.
 * These dirs may be excluded when looking for source files
 */    
spoofax-dirs = <map(!$[[<project-path>]/[<id>]])>["bin", "editor", "icons", "include", "META-INF", "syntax",
  "utils", ".cache", ".externalToolBuilders", ".settings", ".svn", "trans"]


rules //strategie + helpers for collecting affected asts, using cache when possible

/**
 * Collects affected ASTs efficiently by using cache when possible
 * @param checks if file is a source file
 * @param checks if dir contains source files
 * @param checks if AST is affected (semantically or syntactically) by the refactoring
 * @param filepath -> cachepath 
 * @type String -> (List(AST), List(Strings)) 
 */
get-affected-asts(is-source-file, is-source-dir, is-affected, get-cache-path):
  dir-path -> (asts, parse-failures)
  where
  	fnames := <get-source-files(is-source-file, is-source-dir)> dir-path;
  	(asts, parse-failures) := <parse-affected-asts(is-affected, get-cache-path)> fnames

/**
 * Collects affected ASTs efficiently by using cache when possible
 * @param checks if AST is affected (semantically or syntactically) by the refactoring
 * @param filepath -> cachepath 
 * @type List(String) -> (List(AST), List(Strings)) 
 */
parse-affected-asts(is-affected, get-cache-path):
  fnames -> (affected-asts, unparsable-files)
  where
    (collected-asts, unparsable-files) := <partition(parse-affected-ast-or-none(is-affected, get-cache-path))> fnames;
    affected-asts := <filter(not(equal(|None())))> collected-asts //filter irrelevant
    
parse-affected-ast-or-none(affected, get-cache-path):
  fname -> ast-or-none
  where
    ast-or-none := <
      reject-ast-from-cache(affected, get-cache-path) <+ //cache can not be used to get the AST since origin info is required
      reject-or-get-ast-from-parsing(affected)
    > fname

reject-ast-from-cache(affected, get-cache-path):
  fname -> None()
  where
    cached-ast := <get-cache-path; ReadFromFile> fname;
    <not(affected)> cached-ast

reject-or-get-ast-from-parsing(affected):
  fname -> ast
  where
    parsed-ast := <parse-file> fname;
    if <not(affected)> parsed-ast then
      ast := None()
    else
      ast := parsed-ast
    end
