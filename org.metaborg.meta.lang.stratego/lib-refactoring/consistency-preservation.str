module consistency-preservation

rules

/**
 * Collects consistency changes by comparing the semantic errors and warnings  
 * of the (re)analyzed trees before and after transformation
 * @example 
 * input:
 * [ast] := [<annotate> tree]
 * [ast-t] := [<annotate; transform; re-annotate> tree]
 * collect-constraint-errors = !(<collect-all(constraint-error), conc>, <collect-all(constraint-warning), conc>) 
 * @param collect-constraint-errors: AST -> (errors, warnings)
 * @type (List(AST), List(AST)) -> (errors, warnings)
 */  
introduced-constraint-errors(collect-constraint-errors):
  (asts, asts-t) -> (introduced-errors, introduced-warnings)
  where
  	ast-change-tuples := <zip> (asts, asts-t);
  	error-warning-tuples := <map(introduced-constraint-errors(collect-constraint-errors))> ast-change-tuples;
  	(introduced-errors, introduced-warnings) := <unzip; all(flatten-list)> error-warning-tuples
  	
/**
 * Collects consistency changes by comparing the semantic errors and warnings  
 * of the (re)analyzed tree before and after transformation
 * @param collect-constraint-errors: AST -> (errors, warnings)
 * @type (AST, AST) -> (errors, warnings)
 */
introduced-constraint-errors(collect-constraint-errors):
  (ast, ast-t) -> (introduced-errors, introduced-warnings)
  where 
    (errors-before, warnings-before) := <collect-constraint-errors; topdown(strip-annos); all(make-set)> ast; 
    //debug(!"consistency errors before: ");
    (errors-after, warnings-after)   := <collect-constraint-errors; topdown(strip-annos); all(make-set)> ast-t;
    //debug(!"consistency errors after : ");
    introduced-errors   := <diff> (errors-after, errors-before); 
    introduced-warnings := <diff> (warnings-after, warnings-before) //TODO: when equal? 
