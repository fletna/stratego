module lib-refactoring/fetch

imports
lib/editor-common.generated

rules //strategies for fetching terms in the ast

/**
 * fetches the AST position by visiting the ancestors 
 * of a term, bottum up, starting at a certain position.
 * @param matches ancestor term to be fetched
 * @param AST
 * @type List(Int)) ->  List(Int)
 */ 
fetch-up-position(match|ast):
  position -> position'
  where
  	term := <term-at-position(|position)> ast;
  	(term', position') := <fetch-up-with-position(match|ast)> (term, position)
  	  
/**
 * fetches an ancestor and its AST position by visiting the ancestors of a term, bottum up
 * @param matches ancestor term to be fetched
 * @param AST
 * @type (Term, List(Int)) -> (Term, List(Int))
 */ 
fetch-up-with-position(match|ast):
  (term, position) -> (term', position')
  where
    (term', position') := <fetch-up-with-position(match, fail|ast)> (term, position)

/**
 * fetches an ancestor and its AST position by visiting the ancestors of a term, bottum up
 * @param matches ancestor term to be fetched
 * @param stop criteria
 * @param AST
 * @type (Term, List(Int)) -> (Term, List(Int))
 */  
fetch-up-with-position(match, stop|ast):
  (term, position) -> (term', position')
  where
    <not(match)> term;
    <not(stop)> term;
    parent-tuple := (<parent-at-position(|position)> ast, <init> position);
    (term', position') := <fetch-up-with-position(match, stop|ast)> parent-tuple

fetch-up-with-position(match, stop|ast):
  (term, position) -> (term, position)
  where
    <match> term

/**
 * fetches a subterm in a chain of single-argument nodes
 * @param matches subterm to be fetched
 * @type Term -> Term
 */  
fetch-down(match):
  term -> term'
  where
    term' := <fetch-down-with-position(match); Fst> (term, [])

/**
 * fetches a subterm and its position in a chain of single-argument nodes
 * @param matches subterm to be fetched
 * @type (Term, List(Int)) -> (Term, List(Int))
 */  
fetch-down-with-position(match):
  (term, position) -> (term', position')
  where 
    <not(match)> term; 
    <get-arguments; ?[e]> term; 
    (term', position') := <fetch-down-with-position(match)> (e, <conc>(position,[0]))
  
fetch-down-with-position(match):
  (term, position) -> (term, position)
  where
    <match> term

  
rules //strategies for fetching terms in the analysed ast

  /**
 * Annotates AST with reference names (analyse),
 * and fetches the annotated selected string in the result AST 
 * @type (String, T) -> (String{T}, T)
 * @param T -> T (or: List(T) -> T)
 */
annotated-terms(analyse):
  (selected, ast) -> (ref-name, ast')
  where
    ast' := <analyse <+ (![<id>]; analyse; Hd)> ast;
    ref-name := <fetch-annotated-term(|<fetch-down(is-string)> selected)> ast'


fetch-annotated-term(|selected):
  analysed-ast -> selected-ref
  where
    selected-ref := <
      fetch-by-origin(
        has-annos; 
        strip-annos; 
        equal(|selected)|selected)
    > analysed-ast

fetch-by-origin(|original-term) =
  fetch-by-origin(not(fail)|original-term)

fetch-by-origin(|original-term):
  ast -> term
  where
    term := <fetch-by-origin(not(fail)|original-term)> ast
 
fetch-by-origin(is-term|original-term):
  ast -> selected'
  where
    selected' := <collect-one(
      where(is-term);
      where(origin-equal(|original-term)) 
    )> ast
