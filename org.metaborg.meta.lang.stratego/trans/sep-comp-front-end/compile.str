module sep-comp-front-end/compile

imports libstrc
imports sep-comp-front-end/misc
imports sep-comp-front-end/dr-scoping
imports sep-comp-front-end/rename-defs2

overlays

  LANGNAME() = "stratego_sugar"

signature constructors
  AmbCall : Term * Term -> Term

strategies

  module-src-gen-file(|project-path, base, extension) =
    dollars-for-capitals;string-replace(|"/", "+");src-gen-file(|project-path, <dollars-for-capitals> base, extension)

strategies

  clean-module(|project-path) = ?Specification(_)

  clean-module(|project-path):
    Module(m, _) -> <id>
  with id
    ; src-gen-dir := <src-gen-dir(|project-path, LANGNAME())>
    ; subdirs := <readdir;remove-all(?"." + ?"..")> src-gen-dir
    ; output-files := <map(\f -> <module-src-gen-file(|project-path, $[[LANGNAME()]/[f]], ".aterm")> m\)> subdirs
    ; <map(try(remove-file))> output-files

strategies

  compile-module(|project-path, project-name):
    Module(m, defs) ->
      ( m
      , <map((id, extract-used-constructors))> combined-defs
      , <map(Snd; split(try(?AnnoDef(_, <id>)); sdeft-to-cified-name, ?AnnoDef(<id>, _) <+ ![]))> defs3
      , usedStrategies
      , ambcalls
      , <mapconcat(?Imports(<id>))> imps
      , <map(Fst)> constrs
      , <map(split(Fst, Snd;extract-used-constructors))> olays
      , <map(!(<Fst>, <Snd>, <Third;extract-used-constructors>))> congs
      )
    with id
      ; (imps, defs2) := <partition(?Imports(_))> defs
      ; <set-config> ("--library", ())
      ; (defs3, constrs, olays, congs) := <strip-annos;frontend-sep-comp> Specification(defs2)
      ; combined-defs := <combine-defs> defs3
      ; (ambcalls, usedStrategies) := <extract-used-strategies> combined-defs
      ; <map(store-combined-defs(|project-path, project-name, m))> combined-defs
      ; <map(!(<Fst>, <Third>);store-combined-defs(|project-path, project-name, m))> congs
      ; <filter(?(_, <def-to-decl>));store-decls(|project-path, project-name, m)> defs3
      ; <combine-defs;map(store-overlay(|project-path, project-name, m))> olays

  compile-module: (project-path, project-name, ast) -> <MetaExplode; compile-module(|project-path, project-name)> ast

  clean-and-compile-module: (project-path, project-name, ast) -> <compile-module>
  with
    <clean-module(|project-path)> ast

rules

  // Rename the arguments and body to something short, we just need a stub that the compiler
  //  accepts for generating the InteropRegistrer. Fails on ExtSDef
  def-to-decl = SDefT(id, map(build-short-svar), map(build-short-tvar), !Id())
  def-to-decl = AnnoDef(id, SDefT(id, map(build-short-svar), map(build-short-tvar), !Id()))

  extract-used-constructors = collect-all(\Op(c,t*) -> $[[c]_[<length> t*]] where not("" := c)\)
  // Annotate used strategies in ambiguous call position
  extract-used-strategies =
    alltd({ where(sdeft-to-cified-name;?n)
          ; SDefT(id, id, id, bottomup(try(
              CallT(id, map(try(CallT(SVar(!AmbCall(<id>, n)), ?[], ?[]))), id))))
          })
  ; free-vars(Add2, Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9, sboundin, (try(?AmbCall(<id>, _)),id); eq)
  ; partition(\AmbCall(ambcall, defUsing) -> (ambcall, defUsing)\)

  build-short-tvar = !VarDec("a", ConstType(Sort("ATerm",[])))
  build-short-svar = !VarDec("a", FunType(Sort("ATerm",[]), Sort("ATerm",[])))

rules

  combine-defs: decls -> <combine-defs(|[])> decls

  combine-defs(|combined): [] -> combined
  combine-defs(|combined): [(name, sdeft)|decls] -> <combine-defs(|combined')> decls
  with
    combined' := <one((?name, ![sdeft|<id>])) <+ ![(name, [sdeft])|<id>]> combined

  store-combined-defs(|project-path, project-name, m):
    (f, def*) -> <store-defs-comma-sep(|project-path, project-name, $[[LANGNAME()]/[f]], m)> def*

  store-decls(|project-path, project-name, m) =
    store-defs-comma-sep(|project-path, project-name, LANGNAME(), m)

  store-overlay(|project-path, project-name, m):
    (f, def*) -> <store-defs-comma-sep(|project-path, project-name, $[[LANGNAME()]/overlays/[f]], m)> def*

  store-defs-comma-sep(|project-path, project-name, base, m):
    def* -> file
  with id
    ; file := <module-src-gen-file(|project-path, base, ".aterm")> $[[project-name]&[m]]
    ; d* := <separate-by(|", ")> def*
    ; <WriteToFile(fprint)> (file, d*)

strategies

  frontend-sep-comp =
    m-transform-split-definitions(id

      // add some definitions and constructors

      ; if-not-lib(m-add-main)
      ; m-add-anno-cong-def
      ; where(dr-constructors; map(m-add-constructor))

      // desugar and check constructors

      ; m-transform-constructors(id
          ; pre-desugar
// commented: Don't add to VarToConst which is used in pre-desugar to turn variables into nullary constructors if the variable matches that nullary constructor name. 
//          ; try(DeclareVarToConst)
          ; try((TupleDecl <+ QuotedConstrDecl); pre-desugar)
// commented: Used in check-constructors, which requires global info on constructors [DONE IN JAVA]
//          ; (GenerateCheckRule <+ dbg(|"GenerateCheckRule fails: "))
          ; try(where(m-MkCongDef; where({sig := <m-def-signature>; rules(SepCompCong : sig)}); m-add-def))
        )

// commented: [MOVED TO BACKEND] where we have access to all overlays
//      // desugar and check overlays
//
      ; m-transform-overlays(id
          ; pre-desugar
          ; check-overlay
//          ; try(DeclareVarToConst)
        )
//
      ; m-transform-overlays(id
//// commented: Nullary constructors feature, off in separate compilation
////          ; m-variables-to-constructors-in-def
          ; pre-desugar
          ; not(def-use-def)
          ; not(check-where-with)
          ; raise-annotations
//          ; GenerateCheckRule
// commented: [MOVED TO BACKEND]
//          ; DeclareExpandOverlay
          ; where(Overlay-to-Congdef; m-add-def)
        )

// commented: checks if used constructor with such an arity exists. Therefore needs global information [DONE IN JAVA]
//      ; m-transform-overlays(
//          not(check-constructors)
//        )

      // transform and check local definitions

      ; m-transform-local-defs(map(id
          ; m-repair-types
          ; pre-desugar        
          ; raise-annotations
        ))

      ; m-lift-dynamic-rules-from-spec

// commented: checks if used strategy with such an arity exists. Therefore needs global information [DONE IN JAVA]
//      ; check-calls

      ; m-transform-local-defs(
          map(id
            ; stratego-desugar
            ; raise-annotations
            ; not(def-use-def)
// commented: [DONE IN JAVA]
//            ; not(check-constructors)
// commented: [MOVED TO BACKEND]
//            ; expand-overlays-in-def
            ; rules-to-sdefs-def
            ; desugar-list-matching
            ; desugar-DefaultVarDec
            ; strename
            ; desugar-def
            ; check-patterns
          )
        )

      ; m-transform-local-defs(id
          ; ![<joindefs>] 
          ; [RenameSDef2]
        )

// commented: [DONE IN JAVA]
//      ; m-transform-external-defs(id
//          ; if ?[_,_|_] then
//              warn(|"multiple external definitions with same signature")
//            ; [id | ![]] // Cannot reuse dyn rule when already used in library
//            end
//          ; [ id
//             ; RenameSDef2
//             ; desugar-DefaultVarDec
//             ; strename
//            ]
//        )

      ; m-transform-local-defs(
          [rename-calls2
           ; simplify
           ; define-congruences-def
          ]
        )

// commented: Can't tell if unused without global information
//      ; if-lib(remove-unused-external-defs, remove-unused-defs)
    )
// commented: based on command line flags that we don't use/set, does some kind of checks and prints intermediate results to files, so not really useful
//    ; tfc1(|"Stratego-Core", "fe-cong")

  frontend-sep-comp-lib =
    m-transform-split-definitions(id)

  m-transform-split-definitions(s) =
    dr-scope-all-verbose(id
     ; to-model
     ; s
     ; m-split-definitions
     )

  m-split-definitions = id
    ; where(id
      ; m-get-all-local-definitions
      ; filter(!(<m-def-signature;not(SepCompCong);Fst>, <id>))
      ; ?localDef*
    )
    ; where(id
      ; m-get-all-constructors
      ; filter(!(<m-constr-signature;constr-sig-to-string>, <id>))
      ; ?constr*
    )
    ; where(id
      ; m-get-all-overlays
      ; map(!(<m-overlay-signature;!$[[<Fst>]_[<Snd>]]>, <id>))
      ; ?overlay*
    )
    ; where(id
      ; dr-all-keys(|"SepCompCong")
      ; filter(!(<Fst>, <strategy-sig-to-string>, <bagof-ModDefinition>))
      ; ?cong*
    )
    ; !(localDef*, constr*, overlay*, cong*)

  constr-sig-to-string = (is-string, is-int); !$[[<Fst>]_[<Snd>]]
  constr-sig-to-string: (Q(c), len) -> $[[<escape> c]_[len]]
  constr-sig-to-string: (Inj(), 0) -> <fail>

  strategy-sig-to-string = !$[[<Fst;cify>]_[<Snd>]_[<Third>]]
  sdeft-to-cified-name: SDefT(n, sargs, targs, _) ->
    <strategy-sig-to-string> (n, <length> sargs, <length> targs)
