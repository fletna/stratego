module sep-comp-front-end/compile

imports libstrc
imports sep-comp-front-end/misc
imports sep-comp-front-end/dr-scoping
imports sep-comp-front-end/rename-defs2

overlays

  LANGNAME() = "stratego_sugar"

strategies

  module-src-gen-file(|project-path, base, extension) =
    dollars-for-capitals;string-replace(|"/", "+");src-gen-file(|project-path, <dollars-for-capitals> base, extension)

strategies

  clean-module(|project-path):
    Module(m, _) -> <id>
  with id
    ; src-gen-dir := <src-gen-dir(|project-path, LANGNAME())>
    ; subdirs := <readdir;remove-all(?"." + ?"..")> src-gen-dir
    ; output-files := <map(\f -> <module-src-gen-file(|project-path, $[[LANGNAME()]/[f]], ".aterm")> m\)> subdirs
    ; <map(try(remove-file))> output-files

strategies

  compile-module(|project-path, project-name):
    Module(m, defs) -> (m, <map(Fst)> combined-defs, <mapconcat(?Imports(<id>))> imps, constrs, <map(Fst)> olays)
    with id
      ; (imps, defs2) := <partition(?Imports(_))> defs
      ; <set-config> ("--library", ())
      ; (defs3, olays) := <strip-annos;frontend-sep-comp> Specification(defs2)
      ; combined-defs := <combine-defs> defs3
      ; <map(store-combined-defs(|project-path, project-name, m))> combined-defs
      ; <map(?(_, <def-to-decl>));store-decls(|project-path, project-name, m)> defs3
      ; constrs := <map(?(_, <extract-used-constructors>))> combined-defs
      ; <combine-defs;map(store-overlay(|project-path, project-name, m))> olays

  clean-and-compile-module: (project-path, project-name, ast) -> result
  with
    <clean-module(|project-path)> ast
  ; result := <compile-module(|project-path, project-name)> ast

rules

  // Rename the arguments and body to something short, we just need a stub that the compiler
  //  accepts for generating the InteropRegistrer

  def-to-decl = SDefT(id, map(build-short-svar), map(build-short-tvar), !Id())
  def-to-decl = AnnoDef(id, SDefT(id, map(build-short-svar), map(build-short-tvar), !Id()))

  extract-used-constructors = collect-all(\Op(c,t*) -> $[[c]_[<length> t*]] where not("" := c)\)

  build-short-tvar = !VarDec("a", ConstType(Sort("ATerm",[])))
  build-short-svar = !VarDec("a", FunType(Sort("ATerm",[]), Sort("ATerm",[])))

rules

  combine-defs: decls -> <combine-defs(|[])> decls

  combine-defs(|combined): [] -> combined
  combine-defs(|combined): [(name, sdeft)|decls] -> <combine-defs(|combined')> decls
  with
    combined' := <one((?name, ![sdeft|<id>])) <+ ![(name, [sdeft])|<id>]> combined

  store-combined-defs(|project-path, project-name, m):
    (f, def*) -> <store-defs-comma-sep(|project-path, project-name, $[[LANGNAME()]/[f]], m)> def*

  store-decls(|project-path, project-name, m) =
    store-defs-comma-sep(|project-path, project-name, LANGNAME(), m)

  store-overlay(|project-path, project-name, m):
    (f, def*) -> <store-defs-comma-sep(|project-path, project-name, $[[LANGNAME()]/overlays/[f]], m)> def*

  store-defs-comma-sep(|project-path, project-name, base, m):
    def* -> file
  with id
    ; file := <module-src-gen-file(|project-path, base, ".aterm")> $[[project-name]&[m]]
    ; d* := <separate-by(|", ")> def*
    ; <WriteToFile(fprint)> (file, d*)

strategies

  frontend-sep-comp =
    m-transform-split-definitions(id

      // add some definitions and constructors

      ; if-not-lib(m-add-main)
      ; m-add-anno-cong-def
      ; where(dr-constructors; map(m-add-constructor))

      // desugar and check constructors

      ; m-transform-constructors(id
          ; pre-desugar
          ; try(DeclareVarToConst)
          ; try((TupleDecl <+ QuotedConstrDecl); pre-desugar)
          ; (GenerateCheckRule <+ dbg(|"GenerateCheckRule fails: "))
          ; try(where(m-MkCongDef; m-add-def))
        )

// commented: moved to backend where we have access to all overlays
//      // desugar and check overlays
//
//      ; m-transform-overlays(id
//          ; pre-desugar
//          ; check-overlay
//          ; try(DeclareVarToConst)
//        )
//
//      ; m-transform-overlays(id
//          ; m-variables-to-constructors-in-def
//          ; pre-desugar
//// commented: Test whether all variables used in builds are matched before. But variables can be nullary constructors or overlays. Therefore needs global information
////          ; not(def-use-def)
//          ; not(check-where-with)
//          ; raise-annotations
//          ; GenerateCheckRule
//          ; DeclareExpandOverlay
//          ; where(Overlay-to-Congdef; m-add-def)
//        )

// commented: checks if used constructor with such an arity exists. Therefore needs global information
//      ; m-transform-overlays(
//          not(check-constructors)
//        )

      // transform and check local definitions

      ; m-transform-local-defs(map(id
          ; m-repair-types
          ; pre-desugar        
          ; raise-annotations
        ))

      ; m-lift-dynamic-rules-from-spec

// commented: checks if used strategy with such an arity exists. Therefore needs global information
//      ; check-calls

      ; m-transform-local-defs(
          map(id
            ; stratego-desugar
            ; raise-annotations
//            ; not(def-use-def)
//            ; not(check-constructors)
//            ; expand-overlays-in-def
            ; rules-to-sdefs-def
            ; desugar-list-matching
            ; desugar-DefaultVarDec
            ; strename
            ; desugar-def
            ; check-patterns
          )
        )

      ; m-transform-local-defs(id
          ; ![<joindefs>] 
          ; [RenameSDef2]
        )

      ; m-transform-external-defs(id
          ; if ?[_,_|_] then
              warn(|"multiple external definitions with same signature")
            ; [id | ![]] // Cannot reuse dyn rule when already used in library
            end
          ; [ id
             ; RenameSDef2
             ; desugar-DefaultVarDec
             ; strename
            ]
        )

      ; m-transform-local-defs(
          [rename-calls2
           ; simplify
           ; define-congruences-def
          ]
        )

// commented: Can't tell if unused without global information
//      ; if-lib(remove-unused-external-defs, remove-unused-defs)
    )
// commented: based on command line flags that we don't use/set, does some kind of checks and prints intermediate results to files, so not really useful
//    ; tfc1(|"Stratego-Core", "fe-cong")

  m-transform-split-definitions(s) =
    dr-scope-all-verbose(id
     ; to-model
     ; s
     ; m-split-definitions
     )

  m-split-definitions = id
    ; where(id
      ; m-get-all-local-definitions
      ; map(!(<m-def-signature;Fst>, <id>))
      ; ?localDef*
    )
//    ; where(id
//      ; m-get-all-constructors
//      ; map(!(<m-constr-signature>, <id>))
//      ; ?constructor*
//    )
    ; where(id
      ; m-get-all-overlays
      ; map(!(<m-overlay-signature;!$[[<Fst>]_[<Snd>]]>, <id>))
      ; ?overlay*
    )
    ; !(localDef*, overlay*)
