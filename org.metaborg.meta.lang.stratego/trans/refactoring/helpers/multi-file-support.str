module refactoring/helpers/multi-file-support

imports
  analysis
  libstrc
  desugar
  sourcedir
  lib/editor-common.generated
  lib-refactoring/files

rules //collecting affected asts using cache when possible
	
get-affected-stratego-asts(is-affected) =
      	<get-affected-asts(
      		has-extension(|"str"), //; not(string-ends-with(|".generated.str"))
      		not(is-spoofax-dir) <+ equal(|$[[<project-path>]/trans]), //is-source-dir
      		is-affected, //is-affected 
      		get-cache-path
      	)> <project-path>

get-cache-path: 
  path -> cache-path
  where
    cache-path := <import-cache-path; string-replace(|".str.sig", ".rtree")> path; 
    <is-newer> (cache-path, path)


rules //name analysis for multiple files
  
analyze-names:
  asts -> <analyze-names-in-asts> desugared-asts
  where
    rules(CurrentFile := "" ProjectDir  := <project-path>);
    try(get-source-base-dir);
    desugared-asts := <map(basic-desugar-top)> asts;
    <declare-globals> Import("libstratego-lib");
    <ensure-imports> desugared-asts

ensure-imports = where(collect-all(?Import(_) <+ ?ImportWildcard(_)); map(declare-globals))

re-analyse-names =
  topdown(strip-annos; try(resugar-Let));
  analyze-names-in-asts

analyze-names-in-asts:
  asts -> asts'
  where 
    asts' := <
      map(alltd(where(not(?Import(_) <+ ?ImportWildcard(_))); declare-globals)); //external imports already done 
      map(declare-bodies-top)
    > asts

resugar-Let: //TODO: better solution?
  Rec(x, y) -> Let(x,y) where origin-term; ?Let(_, _)

