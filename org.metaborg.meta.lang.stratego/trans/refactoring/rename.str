module refactoring/rename

imports
  analysis
  libstrc
  lib/editor-common.generated
  lib-refactoring/generic-rename
  lib-refactoring/files
  refactoring/helpers/multi-file-support
  refactoring/helpers/semantic-checks

rules //rename refactoring

rename-refactoring:
  (newname, name{ref}, position, ast-analyzed, path, project-path) -> 
  (ast-changes, [], <make-set> errors, <make-set> warnings)
  where 
    renamings := <get-dependend-renamings> (name{ref}, newname);
    if <not(has-extension(|"spt"))> path then
      (asts, parse-errors) := <get-asts-affected-by-renaming>(ref, renamings, ast-analyzed)
    else //testing language
      (asts, parse-errors) := ([ast-analyzed], [])
    end;
    (ast-changes, semantic-errors, warnings) := <apply-rename-refactoring(
      re-analyse-names, 
      collect-semantic-issues |
      renamings
    )> asts;
    ext-decl-errors := <external-declaration-errors> ref;
    errors := <concat>[parse-errors, ext-decl-errors, semantic-errors]
    //TODO Spoofax, schedule analysis affected files: analysis must be redone in case refactoring is canceled
    
rules //dependent names
  
get-dependend-renamings:
  r@(refname, newname) -> renamings
  where
    <?_{ref}> refname;
    if <Declaration; ?RDecT(oldname, _, _)> ref then 
      old-names := <prefixes-dynrules; map(!$[[<id>]-[oldname]]{ref})>;
      new-names := <prefixes-dynrules; map(!$[[<id>]-[newname]]{ref})>;
      renamings := [(oldname{ref}, newname)|<zip>(old-names, new-names)]
    else
      renamings := [r]
    end

prefixes-dynrules =
  !["once", "bagof", "bigbagof", "all-keys", "innermost-scope", "break", "break-bp", 
    "continue", "chain", "bigchain", "new", "undefine", "aux", "reverse-bagof", "innermost-scope",
    "break-to-label","continue-to-label", "throw", "fold", "bigfold"]

rules //collect asts that are possibly affected by renaming, efficient implementation using cache

get-asts-affected-by-renaming:
  (ref-anno, renamings, ast) -> (analysed-asts, parse-errors)
  where
    if <is-global-ref> ref-anno then //files are only collected if the selected var is global 
      (affected-asts, unparsable-files) := 
      	<get-affected-stratego-asts(oncetd(is-endangered-name(|renamings)))>;
      analysed-asts := <analyze-names> affected-asts 
    else
      analysed-asts := [ast];
      unparsable-files := []
    end;
    parse-errors := <map(!$[parsing failed for: '[<id>]'])> unparsable-files
    
is-global-ref =
  where(?ref; <Declaration; signature-of; DeclareCookie; equal(|ref)> ref)


rules //precondition checks: do not rename an external declaration

external-declaration-errors:
  ref -> <conc> (generated-file-errors, external-lib-errors)
  where 
    files := <get-source-files(|"str", <dirs-with-generated-files>)> <project-path>; 
    generated-file-errors := <filter(declared-in-generated-file(|ref))> files; 
    external-lib-errors := <![<declared-in-external-lib>] <+ ![]> ref

declared-in-generated-file(|ref):
  fname -> $[Name in [<base-filename>] can not be edited]
  where
    not(is-editable);
    (((import-cache-path <+ get-cache-path); ReadFromFile) <+ parse-file);
    declare-globals-top;  
    oncetd(?_{ref})

declared-in-external-lib:
  ref -> $[External declaration can not be edited]
  where
    <Declaration; get-constructor; string-starts-with(|"Ext")> ref
    
dirs-with-generated-files =
	![$[[<project-path>]], $[[<project-path>]/include], $[[<project-path>]/lib], $[[<project-path>]/lib-refactoring]]

is-editable = 
  not(string-ends-with(|".generated.str"));
  not(dirname; string-ends-with(|"include"))