module test-rename-samantic-issues
 
language Stratego-Sugar

/**
 * Basic rename testcases: basic constructs, errors do not occur
 */
setup [[
  module test-rename-semantic-issues  
  imports lib/editor-common.generated
  rules
]]

test Rename Unintended-Strategy-Overloading (1)
  [[ 
  	  aaa = fail
      [[bbb]] =  id 
  ]] refactor rename-refactoring("aaa") to 
  [[
  	  aaa = fail
      aaa = id 
  ]]
  1 error
  
test Rename Unintended-Strategy-Overloading (2)
  [[ 
  	  aaa(s) = s; fail
      [[bbb]] =  id 
  ]] refactor rename-refactoring("aaa") to 
  [[
  	  aaa(s) = s; fail
      aaa = id 
  ]]
  0 error
  
test Rename Shadow-Global-Strategy (1)
  [[ 
  	  aaa = debug; fail
  	  b(foo) = aaa; [[foo]]
  ]] refactor rename-refactoring("aaa") to 
  [[
  	  aaa = debug; fail
  	  b(aaa) = aaa; aaa
  ]]
  1 error

test Rename Shadow-Global-Strategy (2)
  [[ 
  	  aaa(s|t) = s; fail
  	  b(foo) = [[aaa]](id|[]); foo
  ]] refactor rename-refactoring("foo") to 
  [[
  	  foo(s|t) = s; fail
  	  b(foo) = [[foo]](id|[]); foo
  ]]
  1 error

test Rename Duplicate-Local-Declaration
  [[
  	  aaa = 
  	  	[[b]] := "";
  	  	c := "" 
  ]] refactor rename-refactoring("c") to 
  [[
  	  aaa = 
  	  	c := "";
  	  	c := "" 
  ]]
  1 error
  1 warning

test Rename Duplicate-Signature (1)
  [[ 
      r : [[Bar]](x,y) -> Bar(y,x) 
      signature constructors
        Bar : Id * Id -> Bar
        Foo : Id * Id -> X
  ]] refactor rename-refactoring("Foo") to 
  [[
      r : [[Foo]](x,y) -> Foo(y,x) 
      signature constructors
        Foo : Id * Id -> Bar
        Foo : Id * Id -> X
  ]]
  2 errors

test Rename Duplicate-Signature (1)
  [[ 
      r : [[Bar]](x,y) -> Bar(y,x) 
      signature constructors
        Bar : Id * Id -> Bar
        Foo : Id -> X
  ]] refactor rename-refactoring("Foo") to 
  [[
      r : [[Foo]](x,y) -> Foo(y,x) 
      signature constructors
        Foo : Id * Id -> Bar
        Foo : Id -> X
  ]]
  0 error
  
test Rename Shadowing Let (1)
  [[ 
  	  foo(|i) = !i
  	  bbb(s|n) = <s> n
      aaa(s) =
        let [[apply]](|i) = <s> (i, <id>)
          in bbb(apply | 1); foo(|0)
        end
  ]] 
  refactor rename-refactoring("foo") to 
  [[
  	  foo(|i) = !i
  	  bbb(s|n) = <s> n
      aaa(s) =
        let foo(|i) = <s> (i, <id>)
          in bbb(foo | 1); foo(|0)
        end
  ]]
  1 error

test Rename Shadowing Let (2)
  [[ 
  	  foo(|i) = <id> i
      aaa(s) =
        let [[apply]](|i) = <s> (i, <id>)
          in map(apply)
        end
  ]] 
  refactor rename-refactoring("foo") to 
  [[
  	  foo(|i) = <id> i
      aaa(s) =
        let foo(|i) = <s> (i, <id>)
          in map(foo)
        end
  ]]
  0 error
  
test Rename From-External-Definition
  [[ 
  	  aaa = [[map]](id) 
  ]] refactor rename-refactoring("foo") to 
  [[
  	  aaa = foo(id) 
  ]]
  2 errors
  
test Rename From-To-External-Definition
  [[ 
  	  aaa = [[map]](id) 
  ]] refactor rename-refactoring("filter") to 
  [[
  	  aaa = filter(id) 
  ]]
  1 errors

test Rename To-External-Definition
  [[ 
  	  [[aaa]](s) = map(s) 
  ]] refactor rename-refactoring("filter") to 
  [[
  	  filter(s) = map(s) 
  ]]
  1 errors

/** Requires multifile support
test Rename To-Generated-Definition
  [[ 
  	  [[aaa]] = id 
  ]] refactor rename-refactoring("origin-term") to 
  [[
  	  origin-term = id 
  ]]
  1 errors
*/

test Rename From-Generated-Definition
  [[ 
  	  [[origin-term]] = id 
  ]] refactor rename-refactoring("aaa") to 
  [[
  	  aaa = id 
  ]]
  1 errors
